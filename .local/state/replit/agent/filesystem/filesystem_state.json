{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a mobile-first building management system for a 15-floor residential building called \"Ultima Skymax Connect\". The application serves multiple user roles (residents, admins, watchmen) and provides community features, amenity bookings, and building management capabilities. Built as a full-stack TypeScript application with React frontend and Express backend, it implements role-based access control and real-time interactions for residential building management.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript in SPA (Single Page Application) mode\n- **Routing**: Wouter for client-side routing with role-based route protection\n- **State Management**: TanStack Query (React Query) for server state management\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **Mobile-First Design**: Responsive layout optimized for mobile devices with bottom navigation\n- **Build Tool**: Vite for fast development and optimized production builds\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Authentication**: Replit Auth with OpenID Connect (OIDC) integration\n- **Session Management**: Express sessions with PostgreSQL store\n- **API Design**: RESTful API endpoints with role-based access control\n- **Validation**: Zod schemas for request/response validation\n- **Error Handling**: Centralized error handling with proper HTTP status codes\n\n## Data Layer\n- **Database**: PostgreSQL with Neon serverless connection\n- **ORM**: Drizzle ORM with type-safe queries and migrations\n- **Schema Design**: Normalized relational schema with proper foreign key relationships\n- **Session Storage**: PostgreSQL-based session persistence\n\n## Authentication & Authorization\n- **Provider**: Replit Auth with OIDC flow\n- **Session Management**: Server-side sessions stored in PostgreSQL\n- **Role-Based Access**: Four user roles (resident, admin, super_admin, watchman) with hierarchical permissions\n- **Route Protection**: Frontend and backend route guards based on user roles\n\n## Key Features Architecture\n- **Community System**: Posts, comments, and social interactions with real-time updates\n- **Booking System**: Time-slot based amenity reservations with conflict prevention\n- **User Management**: Admin approval workflows for resident onboarding\n- **Notification System**: Guest notifications and building alerts\n\n## Mobile-Optimized Design\n- **Bottom Navigation**: Tab-based navigation for easy thumb access\n- **Responsive Components**: Mobile-first component design with touch-friendly interactions\n- **PWA-Ready**: Configured for progressive web app capabilities\n\n# External Dependencies\n\n## Database & Infrastructure\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Replit Hosting**: Integrated development and deployment platform\n\n## Authentication Services\n- **Replit Auth**: OpenID Connect authentication provider with automatic user management\n\n## UI & Styling\n- **Shadcn/ui**: Pre-built React component library with Radix UI primitives\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Lucide React**: Icon library for consistent iconography\n\n## Development Tools\n- **TypeScript**: Static typing for enhanced development experience\n- **Vite**: Fast build tool with HMR for development\n- **Drizzle Kit**: Database migration and schema management tools\n\n## Runtime Dependencies\n- **TanStack Query**: Server state management with caching and synchronization\n- **React Hook Form**: Form handling with validation\n- **Date-fns**: Date manipulation and formatting utilities\n- **Wouter**: Lightweight client-side routing","size_bytes":3813},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      fontFamily: {\n        roboto: ['Roboto', 'sans-serif'],\n        sans: ['Roboto', 'sans-serif'],\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        error: \"var(--error)\",\n        surface: \"var(--surface)\",\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      boxShadow: {\n        'material': '0 2px 4px rgba(0,0,0,0.1), 0 8px 16px rgba(0,0,0,0.1)',\n        'material-lg': '0 4px 8px rgba(0,0,0,0.12), 0 16px 32px rgba(0,0,0,0.12)',\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2557},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4198},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { hashPassword, comparePasswords, generateResetToken, getPasswordResetTokenExpiry, isPasswordResetTokenExpired } from \"./auth\";\nimport { insertPostSchema, insertCommentSchema, insertBookingSchema, insertGuestNotificationSchema, insertMessageSchema, insertAnnouncementSchema, insertMaintenanceRequestSchema, insertBiometricRequestSchema, insertTenantDocumentSchema, insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup local authentication strategy\n  passport.use(\n    new LocalStrategy(\n      { usernameField: 'username', passwordField: 'password' },\n      async (username, password, done) => {\n        try {\n          const user = await storage.getUserByUsername(username.toLowerCase());\n          if (!user || !user.password) {\n            return done(null, false, { message: 'Invalid username or password' });\n          }\n          \n          const isValidPassword = await comparePasswords(password, user.password);\n          if (!isValidPassword) {\n            return done(null, false, { message: 'Invalid username or password' });\n          }\n          \n          if (user.status !== 'active') {\n            return done(null, false, { message: 'Account is not active. Please contact admin.' });\n          }\n          \n          return done(null, user);\n        } catch (error) {\n          return done(error);\n        }\n      }\n    )\n  );\n\n  // Auth middleware\n  await setupAuth(app);\n\n  // Local authentication routes\n  app.post('/api/auth/local/login', (req, res, next) => {\n    passport.authenticate('local', (err: any, user: any, info: any) => {\n      if (err) {\n        return res.status(500).json({ message: 'Authentication failed' });\n      }\n      if (!user) {\n        return res.status(401).json({ message: info?.message || 'Invalid credentials' });\n      }\n      \n      req.logIn(user, (err: any) => {\n        if (err) {\n          return res.status(500).json({ message: 'Login failed' });\n        }\n        res.json(user);\n      });\n    })(req, res, next);\n  });\n\n  app.post('/api/auth/local/register', async (req, res) => {\n    try {\n      const { username, password, firstName, lastName, email, unitNumber } = req.body;\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(username.toLowerCase());\n      if (existingUser) {\n        return res.status(400).json({ message: 'Username already exists' });\n      }\n      \n      const existingEmail = await storage.getUserByEmail(email);\n      if (existingEmail) {\n        return res.status(400).json({ message: 'Email already exists' });\n      }\n      \n      // Hash password\n      const hashedPassword = await hashPassword(password);\n      \n      // Create user with pending status (requires admin approval)\n      const userData = {\n        username: username.toLowerCase(),\n        password: hashedPassword,\n        firstName,\n        lastName,\n        email,\n        unitNumber,\n        role: 'resident' as const,\n        status: 'pending' as const,\n        isOwner: true,\n      };\n      \n      const user = await storage.createUser(userData);\n      \n      res.status(201).json({ \n        message: 'Registration successful. Please wait for admin approval.',\n        user: { \n          id: user.id, \n          username: user.username, \n          firstName: user.firstName, \n          lastName: user.lastName,\n          status: user.status \n        } \n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n      res.status(500).json({ message: 'Registration failed' });\n    }\n  });\n\n  app.post('/api/auth/forgot-password', async (req, res) => {\n    try {\n      const { email } = req.body;\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        // Don't reveal if email exists for security\n        return res.json({ message: 'If that email exists, a reset link has been sent.' });\n      }\n      \n      // Generate reset token\n      const token = generateResetToken();\n      const expiresAt = getPasswordResetTokenExpiry();\n      \n      await storage.createPasswordResetToken({\n        userId: user.id,\n        token,\n        expiresAt,\n        used: false,\n      });\n      \n      // In a real app, you'd send an email here\n      console.log(`Password reset token for ${email}: ${token}`);\n      \n      res.json({ message: 'If that email exists, a reset link has been sent.' });\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      res.status(500).json({ message: 'Failed to process request' });\n    }\n  });\n\n  app.post('/api/auth/reset-password', async (req, res) => {\n    try {\n      const { token, newPassword } = req.body;\n      \n      if (!token || !newPassword) {\n        return res.status(400).json({ message: 'Token and new password are required' });\n      }\n      \n      const resetToken = await storage.getPasswordResetToken(token);\n      if (!resetToken || resetToken.used || isPasswordResetTokenExpired(resetToken.expiresAt)) {\n        return res.status(400).json({ message: 'Invalid or expired reset token' });\n      }\n      \n      // Hash new password and update user\n      const hashedPassword = await hashPassword(newPassword);\n      await storage.updateUserPassword(resetToken.userId, hashedPassword);\n      \n      // Mark token as used\n      await storage.markTokenAsUsed(resetToken.id);\n      \n      res.json({ message: 'Password reset successfully' });\n    } catch (error) {\n      console.error('Reset password error:', error);\n      res.status(500).json({ message: 'Failed to reset password' });\n    }\n  });\n\n  app.get('/api/auth/user', async (req: any, res) => {\n    try {\n      if (req.isAuthenticated() && req.user) {\n        // Check if it's a local user or Replit user\n        if (req.user.claims) {\n          // Replit Auth user\n          const userEmail = req.user.claims.email;\n          const allUsers = await storage.getAllUsers();\n          const user = allUsers.find((u: any) => u.email === userEmail);\n          res.json(user || null);\n        } else {\n          // Local auth user\n          res.json(req.user);\n        }\n      } else {\n        res.status(401).json({ message: 'Unauthorized' });\n      }\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      res.status(500).json({ message: 'Failed to fetch user' });\n    }\n  });\n\n  // Admin user management routes\n  app.get('/api/admin/users', async (req: any, res) => {\n    try {\n      const currentUser = req.user?.claims ? \n        await storage.getUser(req.user.claims.sub) : \n        req.user;\n      \n      if (!currentUser || (currentUser.role !== 'admin' && currentUser.role !== 'super_admin')) {\n        return res.status(403).json({ message: 'Unauthorized' });\n      }\n      \n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      res.status(500).json({ message: 'Failed to fetch users' });\n    }\n  });\n\n  app.post('/api/admin/users', async (req: any, res) => {\n    try {\n      const currentUser = req.user?.claims ? \n        await storage.getUser(req.user.claims.sub) : \n        req.user;\n      \n      if (!currentUser || (currentUser.role !== 'admin' && currentUser.role !== 'super_admin')) {\n        return res.status(403).json({ message: 'Unauthorized' });\n      }\n      \n      const { username, password, firstName, lastName, email, unitNumber, role, isOwner } = req.body;\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(username.toLowerCase());\n      if (existingUser) {\n        return res.status(400).json({ message: 'Username already exists' });\n      }\n      \n      // Hash password\n      const hashedPassword = await hashPassword(password || 'Skymax123');\n      \n      const userData = {\n        username: username.toLowerCase(),\n        password: hashedPassword,\n        firstName,\n        lastName,\n        email,\n        unitNumber,\n        role: role || 'resident',\n        status: 'active' as const,\n        isOwner: isOwner ?? true,\n      };\n      \n      const user = await storage.createUser(userData);\n      res.status(201).json(user);\n    } catch (error) {\n      console.error('Error creating user:', error);\n      res.status(500).json({ message: 'Failed to create user' });\n    }\n  });\n\n  app.patch('/api/admin/users/:userId/status', async (req: any, res) => {\n    try {\n      const currentUser = req.user?.claims ? \n        await storage.getUser(req.user.claims.sub) : \n        req.user;\n      \n      if (!currentUser || (currentUser.role !== 'admin' && currentUser.role !== 'super_admin')) {\n        return res.status(403).json({ message: 'Unauthorized' });\n      }\n      \n      const { status } = req.body;\n      const updatedUser = await storage.updateUserStatus(req.params.userId, status);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error('Error updating user status:', error);\n      res.status(500).json({ message: 'Failed to update user status' });\n    }\n  });\n\n  // Legacy Replit auth routes (keeping for backward compatibility)\n\n  // User management routes (Admin/Super Admin only)\n  app.get('/api/users', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || (user.role !== 'admin' && user.role !== 'super_admin')) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n      \n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.patch('/api/users/:userId/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const targetUserId = req.params.userId;\n      const { status } = req.body;\n      \n      const user = await storage.getUser(userId);\n      \n      if (!user || (user.role !== 'admin' && user.role !== 'super_admin')) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n      \n      const updatedUser = await storage.updateUserStatus(targetUserId, status);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user status:\", error);\n      res.status(500).json({ message: \"Failed to update user status\" });\n    }\n  });\n\n  app.patch('/api/users/:userId/role', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const targetUserId = req.params.userId;\n      const { role } = req.body;\n      \n      const user = await storage.getUser(userId);\n      \n      // Only super admin can change roles\n      if (!user || user.role !== 'super_admin') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n      \n      const updatedUser = await storage.updateUserRole(targetUserId, role);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user role:\", error);\n      res.status(500).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  // Post routes\n  app.get('/api/posts', isAuthenticated, async (req: any, res) => {\n    try {\n      const { type } = req.query;\n      \n      let posts;\n      if (type) {\n        posts = await storage.getPostsByType(type as string);\n      } else {\n        posts = await storage.getAllPosts();\n      }\n      \n      res.json(posts);\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n      res.status(500).json({ message: \"Failed to fetch posts\" });\n    }\n  });\n\n  app.post('/api/posts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const postData = insertPostSchema.parse({\n        ...req.body,\n        authorId: userId,\n      });\n      \n      const post = await storage.createPost(postData);\n      res.json(post);\n    } catch (error) {\n      console.error(\"Error creating post:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid post data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create post\" });\n    }\n  });\n\n  app.patch('/api/posts/:postId/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const postId = req.params.postId;\n      const { status } = req.body;\n      \n      const user = await storage.getUser(userId);\n      \n      if (!user || (user.role !== 'admin' && user.role !== 'super_admin')) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n      \n      const post = await storage.updatePostStatus(postId, status);\n      res.json(post);\n    } catch (error) {\n      console.error(\"Error updating post status:\", error);\n      res.status(500).json({ message: \"Failed to update post status\" });\n    }\n  });\n\n  app.post('/api/posts/:postId/like', isAuthenticated, async (req: any, res) => {\n    try {\n      const postId = req.params.postId;\n      const post = await storage.likePost(postId);\n      res.json(post);\n    } catch (error) {\n      console.error(\"Error liking post:\", error);\n      res.status(500).json({ message: \"Failed to like post\" });\n    }\n  });\n\n  // Comment routes\n  app.post('/api/posts/:postId/comments', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const postId = req.params.postId;\n      const commentData = insertCommentSchema.parse({\n        ...req.body,\n        postId,\n        authorId: userId,\n      });\n      \n      const comment = await storage.createComment(commentData);\n      res.json(comment);\n    } catch (error) {\n      console.error(\"Error creating comment:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid comment data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create comment\" });\n    }\n  });\n\n  // Amenity routes\n  app.get('/api/amenities', isAuthenticated, async (req, res) => {\n    try {\n      const amenities = await storage.getAllAmenities();\n      res.json(amenities);\n    } catch (error) {\n      console.error(\"Error fetching amenities:\", error);\n      res.status(500).json({ message: \"Failed to fetch amenities\" });\n    }\n  });\n\n  // Booking routes\n  app.get('/api/bookings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const bookings = await storage.getUserBookings(userId);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.post('/api/bookings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const bookingData = insertBookingSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      // Check for conflicts\n      const existingBookings = await storage.getBookingsByAmenityAndDate(\n        bookingData.amenityId,\n        bookingData.bookingDate\n      );\n      \n      const hasConflict = existingBookings.some(booking => {\n        const startTime = bookingData.startTime;\n        const endTime = bookingData.endTime;\n        const existingStart = booking.startTime;\n        const existingEnd = booking.endTime;\n        \n        return (startTime < existingEnd && endTime > existingStart);\n      });\n      \n      if (hasConflict) {\n        return res.status(400).json({ message: \"Time slot is already booked\" });\n      }\n      \n      const booking = await storage.createBooking(bookingData);\n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error creating booking:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid booking data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create booking\" });\n    }\n  });\n\n  app.patch('/api/bookings/:bookingId/cancel', isAuthenticated, async (req: any, res) => {\n    try {\n      const bookingId = req.params.bookingId;\n      const booking = await storage.cancelBooking(bookingId);\n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error cancelling booking:\", error);\n      res.status(500).json({ message: \"Failed to cancel booking\" });\n    }\n  });\n\n  // Guest notification routes (Enhanced for Watchman features)\n  app.get('/api/guest-notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      let notifications;\n      if (user.role === 'watchman') {\n        // Watchman sees all active guest notifications\n        notifications = await storage.getAllActiveGuestNotifications();\n      } else {\n        // Residents see only their own notifications\n        notifications = await storage.getUserGuestNotifications(userId);\n      }\n      \n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching guest notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch guest notifications\" });\n    }\n  });\n\n  app.post('/api/guest-notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'watchman') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n      \n      const notificationData = insertGuestNotificationSchema.parse(req.body);\n      const notification = await storage.createGuestNotification(notificationData);\n      res.json(notification);\n    } catch (error) {\n      console.error(\"Error creating guest notification:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid notification data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create guest notification\" });\n    }\n  });\n\n  app.patch('/api/guest-notifications/:notificationId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const notificationId = req.params.notificationId;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'watchman') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n      \n      const notification = await storage.updateGuestNotification(notificationId, req.body);\n      res.json(notification);\n    } catch (error) {\n      console.error(\"Error updating guest notification:\", error);\n      res.status(500).json({ message: \"Failed to update guest notification\" });\n    }\n  });\n\n  app.patch('/api/guest-notifications/:notificationId/approve', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { notificationId } = req.params;\n      const { approved, notes } = req.body;\n      \n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'watchman') {\n        return res.status(403).json({ message: \"Unauthorized - Watchman access required\" });\n      }\n      \n      const updatedNotification = await storage.updateGuestNotification(notificationId, {\n        watchmanApproved: approved,\n        watchmanNotes: notes,\n      });\n      \n      res.json(updatedNotification);\n    } catch (error) {\n      console.error(\"Error updating guest notification:\", error);\n      res.status(500).json({ message: \"Failed to update guest notification\" });\n    }\n  });\n\n  // Messages endpoints\n  app.get('/api/messages', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const messages = await storage.getUserMessages(userId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post('/api/messages', isAuthenticated, async (req: any, res) => {\n    try {\n      const senderId = req.user.claims.sub;\n      const messageData = insertMessageSchema.parse({\n        ...req.body,\n        senderId,\n      });\n      \n      const message = await storage.createMessage(messageData);\n      res.json(message);\n    } catch (error) {\n      console.error(\"Error creating message:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid message data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create message\" });\n    }\n  });\n\n  app.patch('/api/messages/:messageId/read', isAuthenticated, async (req: any, res) => {\n    try {\n      const { messageId } = req.params;\n      const message = await storage.markMessageAsRead(messageId);\n      res.json(message);\n    } catch (error) {\n      console.error(\"Error marking message as read:\", error);\n      res.status(500).json({ message: \"Failed to mark message as read\" });\n    }\n  });\n\n  // Announcements endpoints\n  app.get('/api/announcements', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const announcements = await storage.getAnnouncementsForRole(user.role);\n      res.json(announcements);\n    } catch (error) {\n      console.error(\"Error fetching announcements:\", error);\n      res.status(500).json({ message: \"Failed to fetch announcements\" });\n    }\n  });\n\n  app.post('/api/announcements', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || (user.role !== 'admin' && user.role !== 'super_admin')) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const announcementData = insertAnnouncementSchema.parse({\n        ...req.body,\n        authorId: userId,\n      });\n      \n      const announcement = await storage.createAnnouncement(announcementData);\n      res.json(announcement);\n    } catch (error) {\n      console.error(\"Error creating announcement:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid announcement data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create announcement\" });\n    }\n  });\n\n  // Maintenance requests endpoints\n  app.get('/api/maintenance-requests', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      let requests;\n      if (user.role === 'admin' || user.role === 'super_admin') {\n        requests = await storage.getAllMaintenanceRequests();\n      } else {\n        requests = await storage.getUserMaintenanceRequests(userId);\n      }\n      \n      res.json(requests);\n    } catch (error) {\n      console.error(\"Error fetching maintenance requests:\", error);\n      res.status(500).json({ message: \"Failed to fetch maintenance requests\" });\n    }\n  });\n\n  app.post('/api/maintenance-requests', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const requestData = insertMaintenanceRequestSchema.parse({\n        ...req.body,\n        userId,\n        unitNumber: user.unitNumber,\n      });\n      \n      const request = await storage.createMaintenanceRequest(requestData);\n      res.json(request);\n    } catch (error) {\n      console.error(\"Error creating maintenance request:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid maintenance request data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create maintenance request\" });\n    }\n  });\n\n  app.patch('/api/maintenance-requests/:requestId/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { requestId } = req.params;\n      const { status, assignedTo } = req.body;\n      \n      const user = await storage.getUser(userId);\n      \n      if (!user || (user.role !== 'admin' && user.role !== 'super_admin')) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n      \n      const updatedRequest = await storage.updateMaintenanceRequestStatus(requestId, status, assignedTo);\n      res.json(updatedRequest);\n    } catch (error) {\n      console.error(\"Error updating maintenance request status:\", error);\n      res.status(500).json({ message: \"Failed to update maintenance request status\" });\n    }\n  });\n\n  // Get booking reports (admin only)\n  app.get(\"/api/booking-reports\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || !['admin', 'super_admin'].includes(user.role)) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const report = await storage.getBookingReport();\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error fetching booking reports:\", error);\n      res.status(500).json({ message: \"Failed to fetch booking reports\" });\n    }\n  });\n\n  // Biometric request routes\n  app.get(\"/api/biometric-requests\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      let requests;\n      if (['admin', 'super_admin'].includes(user.role)) {\n        // Admins can see all requests\n        requests = await storage.getBiometricRequests();\n      } else {\n        // Regular users can only see their own requests\n        requests = await storage.getBiometricRequestsByUserId(userId);\n      }\n      \n      res.json(requests);\n    } catch (error) {\n      console.error(\"Error fetching biometric requests:\", error);\n      res.status(500).json({ message: \"Failed to fetch biometric requests\" });\n    }\n  });\n\n  app.post(\"/api/biometric-requests\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub;\n      const validatedData = insertBiometricRequestSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const request = await storage.createBiometricRequest(validatedData);\n      res.status(201).json(request);\n    } catch (error) {\n      console.error(\"Error creating biometric request:\", error);\n      res.status(500).json({ message: \"Failed to create biometric request\" });\n    }\n  });\n\n  app.put(\"/api/biometric-requests/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || !['admin', 'super_admin'].includes(user.role)) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const updates = {\n        ...req.body,\n        approvedBy: userId,\n        approvedDate: req.body.status === 'approved' ? new Date() : null,\n      };\n      \n      const request = await storage.updateBiometricRequest(req.params.id, updates);\n      if (!request) {\n        return res.status(404).json({ message: \"Biometric request not found\" });\n      }\n      \n      res.json(request);\n    } catch (error) {\n      console.error(\"Error updating biometric request:\", error);\n      res.status(500).json({ message: \"Failed to update biometric request\" });\n    }\n  });\n\n  // Tenant document routes\n  app.get(\"/api/tenant-documents\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      let documents;\n      if (['admin', 'super_admin'].includes(user.role)) {\n        // Admins can see all documents\n        documents = await storage.getTenantDocuments();\n      } else {\n        // Regular users can only see their own documents\n        documents = await storage.getTenantDocumentsByUserId(userId);\n      }\n      \n      res.json(documents);\n    } catch (error) {\n      console.error(\"Error fetching tenant documents:\", error);\n      res.status(500).json({ message: \"Failed to fetch tenant documents\" });\n    }\n  });\n\n  app.post(\"/api/tenant-documents\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub;\n      const validatedData = insertTenantDocumentSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const document = await storage.createTenantDocument(validatedData);\n      res.status(201).json(document);\n    } catch (error) {\n      console.error(\"Error creating tenant document:\", error);\n      res.status(500).json({ message: \"Failed to create tenant document\" });\n    }\n  });\n\n  app.put(\"/api/tenant-documents/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || !['admin', 'super_admin'].includes(user.role)) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const updates = {\n        ...req.body,\n        reviewedBy: userId,\n        reviewDate: new Date(),\n      };\n      \n      const document = await storage.updateTenantDocument(req.params.id, updates);\n      if (!document) {\n        return res.status(404).json({ message: \"Tenant document not found\" });\n      }\n      \n      res.json(document);\n    } catch (error) {\n      console.error(\"Error updating tenant document:\", error);\n      res.status(500).json({ message: \"Failed to update tenant document\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":30678},"server/storage.ts":{"content":"import {\n  users,\n  posts,\n  comments,\n  amenities,\n  bookings,\n  guestNotifications,\n  messages,\n  announcements,\n  maintenanceRequests,\n  biometricRequests,\n  tenantDocuments,\n  passwordResetTokens,\n  type User,\n  type UpsertUser,\n  type Post,\n  type InsertPost,\n  type PostWithAuthor,\n  type Comment,\n  type InsertComment,\n  type Amenity,\n  type Booking,\n  type InsertBooking,\n  type BookingWithAmenity,\n  type GuestNotification,\n  type InsertGuestNotification,\n  type GuestNotificationWithUser,\n  type Message,\n  type InsertMessage,\n  type MessageWithUsers,\n  type Announcement,\n  type InsertAnnouncement,\n  type AnnouncementWithAuthor,\n  type MaintenanceRequest,\n  type InsertMaintenanceRequest,\n  type MaintenanceRequestWithUsers,\n  type BiometricRequest,\n  type BiometricRequestWithUser,\n  type InsertBiometricRequest,\n  type TenantDocument,\n  type TenantDocumentWithUser,\n  type InsertTenantDocument,\n  type PasswordResetToken,\n  type InsertPasswordResetToken,\n  type BookingReport,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, lte, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Local authentication\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: UpsertUser): Promise<User>;\n  updateUserPassword(userId: string, hashedPassword: string): Promise<User>;\n  \n  // Password reset\n  createPasswordResetToken(token: InsertPasswordResetToken): Promise<PasswordResetToken>;\n  getPasswordResetToken(token: string): Promise<PasswordResetToken | undefined>;\n  markTokenAsUsed(tokenId: string): Promise<void>;\n  \n  // User management\n  getAllUsers(): Promise<User[]>;\n  updateUserStatus(userId: string, status: 'active' | 'pending' | 'suspended'): Promise<User>;\n  updateUserRole(userId: string, role: 'resident' | 'admin' | 'super_admin' | 'watchman'): Promise<User>;\n  \n  // Post operations\n  createPost(post: InsertPost): Promise<Post>;\n  getAllPosts(): Promise<PostWithAuthor[]>;\n  getPostsByType(type: string): Promise<PostWithAuthor[]>;\n  updatePostStatus(postId: string, status: 'active' | 'resolved' | 'frozen'): Promise<Post>;\n  likePost(postId: string): Promise<Post>;\n  \n  // Comment operations\n  createComment(comment: InsertComment): Promise<Comment>;\n  getCommentsByPostId(postId: string): Promise<Comment[]>;\n  \n  // Amenity operations\n  getAllAmenities(): Promise<Amenity[]>;\n  getAmenityById(id: string): Promise<Amenity | undefined>;\n  \n  // Booking operations\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  getUserBookings(userId: string): Promise<BookingWithAmenity[]>;\n  getBookingsByAmenityAndDate(amenityId: string, date: string): Promise<Booking[]>;\n  cancelBooking(bookingId: string): Promise<Booking>;\n  \n  // Guest notification operations\n  createGuestNotification(notification: InsertGuestNotification): Promise<GuestNotification>;\n  getUserGuestNotifications(userId: string): Promise<GuestNotificationWithUser[]>;\n  getAllActiveGuestNotifications(): Promise<GuestNotificationWithUser[]>;\n  updateGuestNotification(notificationId: string, updates: Partial<GuestNotification>): Promise<GuestNotification>;\n  \n  // Message operations\n  createMessage(message: InsertMessage): Promise<Message>;\n  getUserMessages(userId: string): Promise<MessageWithUsers[]>;\n  markMessageAsRead(messageId: string): Promise<Message>;\n  \n  // Announcement operations\n  createAnnouncement(announcement: InsertAnnouncement): Promise<Announcement>;\n  getAnnouncementsForRole(role: string): Promise<AnnouncementWithAuthor[]>;\n  getAllAnnouncements(): Promise<AnnouncementWithAuthor[]>;\n  \n  // Maintenance request operations\n  createMaintenanceRequest(request: InsertMaintenanceRequest): Promise<MaintenanceRequest>;\n  getUserMaintenanceRequests(userId: string): Promise<MaintenanceRequestWithUsers[]>;\n  getAllMaintenanceRequests(): Promise<MaintenanceRequestWithUsers[]>;\n  updateMaintenanceRequestStatus(requestId: string, status: string, assignedTo?: string): Promise<MaintenanceRequest>;\n  \n  // Biometric request operations\n  createBiometricRequest(request: InsertBiometricRequest): Promise<BiometricRequest>;\n  getBiometricRequests(): Promise<BiometricRequestWithUser[]>;\n  getBiometricRequestsByUserId(userId: string): Promise<BiometricRequestWithUser[]>;\n  updateBiometricRequest(id: string, updates: Partial<BiometricRequest>): Promise<BiometricRequest | undefined>;\n  \n  // Tenant document operations\n  createTenantDocument(document: InsertTenantDocument): Promise<TenantDocument>;\n  getTenantDocuments(): Promise<TenantDocumentWithUser[]>;\n  getTenantDocumentsByUserId(userId: string): Promise<TenantDocumentWithUser[]>;\n  updateTenantDocument(id: string, updates: Partial<TenantDocument>): Promise<TenantDocument | undefined>;\n  \n  // Booking report operations\n  getBookingReport(): Promise<BookingReport>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (required for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    // First check if user exists by email\n    const [existingUser] = await db.select().from(users).where(eq(users.email, userData.email || ''));\n    \n    if (existingUser) {\n      // Update existing user\n      const [user] = await db\n        .update(users)\n        .set({\n          ...userData,\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, existingUser.id))\n        .returning();\n      return user;\n    } else {\n      // Create new user\n      const [user] = await db\n        .insert(users)\n        .values(userData)\n        .returning();\n      return user;\n    }\n  }\n\n  // Local authentication\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async updateUserPassword(userId: string, hashedPassword: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ password: hashedPassword, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Password reset\n  async createPasswordResetToken(token: InsertPasswordResetToken): Promise<PasswordResetToken> {\n    const [resetToken] = await db.insert(passwordResetTokens).values(token).returning();\n    return resetToken;\n  }\n\n  async getPasswordResetToken(token: string): Promise<PasswordResetToken | undefined> {\n    const [resetToken] = await db\n      .select()\n      .from(passwordResetTokens)\n      .where(eq(passwordResetTokens.token, token));\n    return resetToken;\n  }\n\n  async markTokenAsUsed(tokenId: string): Promise<void> {\n    await db\n      .update(passwordResetTokens)\n      .set({ used: true })\n      .where(eq(passwordResetTokens.id, tokenId));\n  }\n\n  // User management\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async updateUserStatus(userId: string, status: 'active' | 'pending' | 'suspended'): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async updateUserRole(userId: string, role: 'resident' | 'admin' | 'super_admin' | 'watchman'): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ role, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Post operations\n  async createPost(post: InsertPost): Promise<Post> {\n    const [newPost] = await db.insert(posts).values(post).returning();\n    return newPost;\n  }\n\n  async getAllPosts(): Promise<PostWithAuthor[]> {\n    const result = await db\n      .select({\n        id: posts.id,\n        title: posts.title,\n        content: posts.content,\n        type: posts.type,\n        status: posts.status,\n        authorId: posts.authorId,\n        likes: posts.likes,\n        createdAt: posts.createdAt,\n        updatedAt: posts.updatedAt,\n        author: {\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          unitNumber: users.unitNumber,\n        }\n      })\n      .from(posts)\n      .leftJoin(users, eq(posts.authorId, users.id))\n      .orderBy(desc(posts.createdAt));\n\n    // Get comments for each post\n    const postsWithComments = await Promise.all(\n      result.map(async (post) => {\n        const postComments = await db\n          .select({\n            id: comments.id,\n            content: comments.content,\n            postId: comments.postId,\n            authorId: comments.authorId,\n            createdAt: comments.createdAt,\n            author: {\n              id: users.id,\n              firstName: users.firstName,\n              lastName: users.lastName,\n              unitNumber: users.unitNumber,\n            }\n          })\n          .from(comments)\n          .leftJoin(users, eq(comments.authorId, users.id))\n          .where(eq(comments.postId, post.id))\n          .orderBy(desc(comments.createdAt));\n\n        return {\n          ...post,\n          author: post.author || { id: '', firstName: 'Unknown', lastName: 'User', unitNumber: null },\n          comments: postComments.map(comment => ({\n            ...comment,\n            author: comment.author || { id: '', firstName: 'Unknown', lastName: 'User', unitNumber: null }\n          })),\n        };\n      })\n    );\n\n    return postsWithComments;\n  }\n\n  async getPostsByType(type: string): Promise<PostWithAuthor[]> {\n    const result = await db\n      .select({\n        id: posts.id,\n        title: posts.title,\n        content: posts.content,\n        type: posts.type,\n        status: posts.status,\n        authorId: posts.authorId,\n        likes: posts.likes,\n        createdAt: posts.createdAt,\n        updatedAt: posts.updatedAt,\n        author: {\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          unitNumber: users.unitNumber,\n        }\n      })\n      .from(posts)\n      .leftJoin(users, eq(posts.authorId, users.id))\n      .where(eq(posts.type, type as any))\n      .orderBy(desc(posts.createdAt));\n\n    const postsWithComments = await Promise.all(\n      result.map(async (post) => {\n        const postComments = await db\n          .select({\n            id: comments.id,\n            content: comments.content,\n            postId: comments.postId,\n            authorId: comments.authorId,\n            createdAt: comments.createdAt,\n            author: {\n              id: users.id,\n              firstName: users.firstName,\n              lastName: users.lastName,\n              unitNumber: users.unitNumber,\n            }\n          })\n          .from(comments)\n          .leftJoin(users, eq(comments.authorId, users.id))\n          .where(eq(comments.postId, post.id))\n          .orderBy(desc(comments.createdAt));\n\n        return {\n          ...post,\n          author: post.author || { id: '', firstName: 'Unknown', lastName: 'User', unitNumber: null },\n          comments: postComments.map(comment => ({\n            ...comment,\n            author: comment.author || { id: '', firstName: 'Unknown', lastName: 'User', unitNumber: null }\n          })),\n        };\n      })\n    );\n\n    return postsWithComments;\n  }\n\n  async updatePostStatus(postId: string, status: 'active' | 'resolved' | 'frozen'): Promise<Post> {\n    const [post] = await db\n      .update(posts)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(posts.id, postId))\n      .returning();\n    return post;\n  }\n\n  async likePost(postId: string): Promise<Post> {\n    const [post] = await db\n      .update(posts)\n      .set({ likes: sql`${posts.likes} + 1` })\n      .where(eq(posts.id, postId))\n      .returning();\n    return post;\n  }\n\n  // Comment operations\n  async createComment(comment: InsertComment): Promise<Comment> {\n    const [newComment] = await db.insert(comments).values(comment).returning();\n    return newComment;\n  }\n\n  async getCommentsByPostId(postId: string): Promise<Comment[]> {\n    return await db.select().from(comments).where(eq(comments.postId, postId)).orderBy(desc(comments.createdAt));\n  }\n\n  // Amenity operations\n  async getAllAmenities(): Promise<Amenity[]> {\n    return await db.select().from(amenities).where(eq(amenities.isActive, true));\n  }\n\n  async getAmenityById(id: string): Promise<Amenity | undefined> {\n    const [amenity] = await db.select().from(amenities).where(eq(amenities.id, id));\n    return amenity;\n  }\n\n  // Booking operations\n  async createBooking(booking: InsertBooking): Promise<Booking> {\n    const [newBooking] = await db.insert(bookings).values(booking).returning();\n    return newBooking;\n  }\n\n  async getUserBookings(userId: string): Promise<BookingWithAmenity[]> {\n    const results = await db\n      .select({\n        id: bookings.id,\n        amenityId: bookings.amenityId,\n        userId: bookings.userId,\n        bookingDate: bookings.bookingDate,\n        startTime: bookings.startTime,\n        endTime: bookings.endTime,\n        status: bookings.status,\n        notes: bookings.notes,\n        createdAt: bookings.createdAt,\n        amenity: amenities,\n        user: {\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          unitNumber: users.unitNumber,\n        }\n      })\n      .from(bookings)\n      .leftJoin(amenities, eq(bookings.amenityId, amenities.id))\n      .leftJoin(users, eq(bookings.userId, users.id))\n      .where(eq(bookings.userId, userId))\n      .orderBy(desc(bookings.createdAt));\n    \n    return results.filter(result => result.amenity !== null) as BookingWithAmenity[];\n  }\n\n  async getBookingsByAmenityAndDate(amenityId: string, date: string): Promise<Booking[]> {\n    return await db\n      .select()\n      .from(bookings)\n      .where(and(\n        eq(bookings.amenityId, amenityId),\n        eq(bookings.bookingDate, date),\n        eq(bookings.status, 'confirmed')\n      ));\n  }\n\n  async cancelBooking(bookingId: string): Promise<Booking> {\n    const [booking] = await db\n      .update(bookings)\n      .set({ status: 'cancelled' })\n      .where(eq(bookings.id, bookingId))\n      .returning();\n    return booking;\n  }\n\n  // Guest notification operations\n  async createGuestNotification(notification: InsertGuestNotification): Promise<GuestNotification> {\n    const [newNotification] = await db.insert(guestNotifications).values(notification).returning();\n    return newNotification;\n  }\n\n  async getUserGuestNotifications(userId: string): Promise<GuestNotificationWithUser[]> {\n    const result = await db\n      .select({\n        id: guestNotifications.id,\n        userId: guestNotifications.userId,\n        guestName: guestNotifications.guestName,\n        guestPhone: guestNotifications.guestPhone,\n        purpose: guestNotifications.purpose,\n        arrivalTime: guestNotifications.arrivalTime,\n        departureTime: guestNotifications.departureTime,\n        parkingSlot: guestNotifications.parkingSlot,\n        isActive: guestNotifications.isActive,\n        watchmanApproved: guestNotifications.watchmanApproved,\n        watchmanNotes: guestNotifications.watchmanNotes,\n        createdAt: guestNotifications.createdAt,\n        user: {\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          unitNumber: users.unitNumber,\n        },\n      })\n      .from(guestNotifications)\n      .leftJoin(users, eq(guestNotifications.userId, users.id))\n      .where(eq(guestNotifications.userId, userId))\n      .orderBy(desc(guestNotifications.createdAt));\n\n    return result.map(item => ({\n      ...item,\n      user: item.user || { id: '', firstName: 'Unknown', lastName: 'User', unitNumber: null }\n    }));\n  }\n\n  async getAllActiveGuestNotifications(): Promise<GuestNotificationWithUser[]> {\n    const result = await db\n      .select({\n        id: guestNotifications.id,\n        userId: guestNotifications.userId,\n        guestName: guestNotifications.guestName,\n        guestPhone: guestNotifications.guestPhone,\n        purpose: guestNotifications.purpose,\n        arrivalTime: guestNotifications.arrivalTime,\n        departureTime: guestNotifications.departureTime,\n        parkingSlot: guestNotifications.parkingSlot,\n        isActive: guestNotifications.isActive,\n        watchmanApproved: guestNotifications.watchmanApproved,\n        watchmanNotes: guestNotifications.watchmanNotes,\n        createdAt: guestNotifications.createdAt,\n        user: {\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          unitNumber: users.unitNumber,\n        },\n      })\n      .from(guestNotifications)\n      .leftJoin(users, eq(guestNotifications.userId, users.id))\n      .where(eq(guestNotifications.isActive, true))\n      .orderBy(desc(guestNotifications.createdAt));\n\n    return result.map(item => ({\n      ...item,\n      user: item.user || { id: '', firstName: 'Unknown', lastName: 'User', unitNumber: null }\n    }));\n  }\n\n  async updateGuestNotification(notificationId: string, updates: Partial<GuestNotification>): Promise<GuestNotification> {\n    const [notification] = await db\n      .update(guestNotifications)\n      .set(updates)\n      .where(eq(guestNotifications.id, notificationId))\n      .returning();\n    return notification;\n  }\n\n  // Message operations\n  async createMessage(message: InsertMessage): Promise<Message> {\n    const [newMessage] = await db.insert(messages).values(message).returning();\n    return newMessage;\n  }\n\n  async getUserMessages(userId: string): Promise<MessageWithUsers[]> {\n    const result = await db\n      .select({\n        id: messages.id,\n        senderId: messages.senderId,\n        receiverId: messages.receiverId,\n        content: messages.content,\n        isRead: messages.isRead,\n        createdAt: messages.createdAt,\n        sender: {\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          unitNumber: users.unitNumber,\n          role: users.role,\n        },\n      })\n      .from(messages)\n      .leftJoin(users, eq(messages.senderId, users.id))\n      .where(eq(messages.receiverId, userId))\n      .orderBy(desc(messages.createdAt));\n\n    const messagesWithReceiver = await Promise.all(\n      result.map(async (msg) => {\n        const [receiver] = await db\n          .select({\n            id: users.id,\n            firstName: users.firstName,\n            lastName: users.lastName,\n            unitNumber: users.unitNumber,\n            role: users.role,\n          })\n          .from(users)\n          .where(eq(users.id, msg.receiverId));\n\n        return {\n          ...msg,\n          sender: msg.sender || { id: '', firstName: 'Unknown', lastName: 'User', unitNumber: null, role: 'resident' as const },\n          receiver: receiver || { id: '', firstName: 'Unknown', lastName: 'User', unitNumber: null, role: 'resident' as const },\n        };\n      })\n    );\n\n    return messagesWithReceiver;\n  }\n\n  async markMessageAsRead(messageId: string): Promise<Message> {\n    const [updatedMessage] = await db\n      .update(messages)\n      .set({ isRead: true })\n      .where(eq(messages.id, messageId))\n      .returning();\n    return updatedMessage;\n  }\n\n  // Announcement operations\n  async createAnnouncement(announcement: InsertAnnouncement): Promise<Announcement> {\n    const [newAnnouncement] = await db.insert(announcements).values(announcement).returning();\n    return newAnnouncement;\n  }\n\n  async getAnnouncementsForRole(role: string): Promise<AnnouncementWithAuthor[]> {\n    const result = await db\n      .select({\n        id: announcements.id,\n        title: announcements.title,\n        content: announcements.content,\n        authorId: announcements.authorId,\n        targetRoles: announcements.targetRoles,\n        isUrgent: announcements.isUrgent,\n        expiresAt: announcements.expiresAt,\n        createdAt: announcements.createdAt,\n        author: {\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          role: users.role,\n        },\n      })\n      .from(announcements)\n      .leftJoin(users, eq(announcements.authorId, users.id))\n      .where(sql`${role} = ANY(${announcements.targetRoles})`)\n      .orderBy(desc(announcements.createdAt));\n\n    return result.map(item => ({\n      ...item,\n      author: item.author || { id: '', firstName: 'Unknown', lastName: 'User', role: 'admin' as const }\n    }));\n  }\n\n  async getAllAnnouncements(): Promise<AnnouncementWithAuthor[]> {\n    const result = await db\n      .select({\n        id: announcements.id,\n        title: announcements.title,\n        content: announcements.content,\n        authorId: announcements.authorId,\n        targetRoles: announcements.targetRoles,\n        isUrgent: announcements.isUrgent,\n        expiresAt: announcements.expiresAt,\n        createdAt: announcements.createdAt,\n        author: {\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          role: users.role,\n        },\n      })\n      .from(announcements)\n      .leftJoin(users, eq(announcements.authorId, users.id))\n      .orderBy(desc(announcements.createdAt));\n\n    return result.map(item => ({\n      ...item,\n      author: item.author || { id: '', firstName: 'Unknown', lastName: 'User', role: 'admin' as const }\n    }));\n  }\n\n  // Maintenance request operations\n  async createMaintenanceRequest(request: InsertMaintenanceRequest): Promise<MaintenanceRequest> {\n    const [newRequest] = await db.insert(maintenanceRequests).values(request).returning();\n    return newRequest;\n  }\n\n  async getUserMaintenanceRequests(userId: string): Promise<MaintenanceRequestWithUsers[]> {\n    const result = await db\n      .select({\n        id: maintenanceRequests.id,\n        userId: maintenanceRequests.userId,\n        title: maintenanceRequests.title,\n        description: maintenanceRequests.description,\n        category: maintenanceRequests.category,\n        priority: maintenanceRequests.priority,\n        status: maintenanceRequests.status,\n        assignedTo: maintenanceRequests.assignedTo,\n        unitNumber: maintenanceRequests.unitNumber,\n        preferredTime: maintenanceRequests.preferredTime,\n        createdAt: maintenanceRequests.createdAt,\n        updatedAt: maintenanceRequests.updatedAt,\n        user: {\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          unitNumber: users.unitNumber,\n        },\n      })\n      .from(maintenanceRequests)\n      .leftJoin(users, eq(maintenanceRequests.userId, users.id))\n      .where(eq(maintenanceRequests.userId, userId))\n      .orderBy(desc(maintenanceRequests.createdAt));\n\n    const requestsWithAssignee = await Promise.all(\n      result.map(async (req) => {\n        let assignee = null;\n        if (req.assignedTo) {\n          const [assigneeUser] = await db\n            .select({\n              id: users.id,\n              firstName: users.firstName,\n              lastName: users.lastName,\n              role: users.role,\n            })\n            .from(users)\n            .where(eq(users.id, req.assignedTo));\n          assignee = assigneeUser;\n        }\n\n        return {\n          ...req,\n          user: req.user || { id: '', firstName: 'Unknown', lastName: 'User', unitNumber: null },\n          assignee,\n        };\n      })\n    );\n\n    return requestsWithAssignee;\n  }\n\n  async getAllMaintenanceRequests(): Promise<MaintenanceRequestWithUsers[]> {\n    const result = await db\n      .select({\n        id: maintenanceRequests.id,\n        userId: maintenanceRequests.userId,\n        title: maintenanceRequests.title,\n        description: maintenanceRequests.description,\n        category: maintenanceRequests.category,\n        priority: maintenanceRequests.priority,\n        status: maintenanceRequests.status,\n        assignedTo: maintenanceRequests.assignedTo,\n        unitNumber: maintenanceRequests.unitNumber,\n        preferredTime: maintenanceRequests.preferredTime,\n        createdAt: maintenanceRequests.createdAt,\n        updatedAt: maintenanceRequests.updatedAt,\n        user: {\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          unitNumber: users.unitNumber,\n        },\n      })\n      .from(maintenanceRequests)\n      .leftJoin(users, eq(maintenanceRequests.userId, users.id))\n      .orderBy(desc(maintenanceRequests.createdAt));\n\n    const requestsWithAssignee = await Promise.all(\n      result.map(async (req) => {\n        let assignee = null;\n        if (req.assignedTo) {\n          const [assigneeUser] = await db\n            .select({\n              id: users.id,\n              firstName: users.firstName,\n              lastName: users.lastName,\n              role: users.role,\n            })\n            .from(users)\n            .where(eq(users.id, req.assignedTo));\n          assignee = assigneeUser;\n        }\n\n        return {\n          ...req,\n          user: req.user || { id: '', firstName: 'Unknown', lastName: 'User', unitNumber: null },\n          assignee,\n        };\n      })\n    );\n\n    return requestsWithAssignee;\n  }\n\n  async updateMaintenanceRequestStatus(requestId: string, status: string, assignedTo?: string): Promise<MaintenanceRequest> {\n    const updateData: any = { status, updatedAt: new Date() };\n    if (assignedTo) {\n      updateData.assignedTo = assignedTo;\n    }\n    \n    const [updatedRequest] = await db\n      .update(maintenanceRequests)\n      .set(updateData)\n      .where(eq(maintenanceRequests.id, requestId))\n      .returning();\n    return updatedRequest;\n  }\n\n  // Removed duplicate user management methods (already defined above)\n\n  // Biometric request operations\n  async getBiometricRequests(): Promise<BiometricRequestWithUser[]> {\n    const requests = await db.select({\n      id: biometricRequests.id,\n      userId: biometricRequests.userId,\n      requestType: biometricRequests.requestType,\n      reason: biometricRequests.reason,\n      accessLevel: biometricRequests.accessLevel,\n      status: biometricRequests.status,\n      approvedBy: biometricRequests.approvedBy,\n      adminNotes: biometricRequests.adminNotes,\n      requestDate: biometricRequests.requestDate,\n      approvedDate: biometricRequests.approvedDate,\n      expiryDate: biometricRequests.expiryDate,\n      createdAt: biometricRequests.createdAt,\n      updatedAt: biometricRequests.updatedAt,\n      user: {\n        id: users.id,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        unitNumber: users.unitNumber,\n        role: users.role,\n      },\n    })\n    .from(biometricRequests)\n    .leftJoin(users, eq(biometricRequests.userId, users.id))\n    .orderBy(desc(biometricRequests.createdAt));\n\n    return requests as BiometricRequestWithUser[];\n  }\n\n  async getBiometricRequestsByUserId(userId: string): Promise<BiometricRequestWithUser[]> {\n    const requests = await db.select({\n      id: biometricRequests.id,\n      userId: biometricRequests.userId,\n      requestType: biometricRequests.requestType,\n      reason: biometricRequests.reason,\n      accessLevel: biometricRequests.accessLevel,\n      status: biometricRequests.status,\n      approvedBy: biometricRequests.approvedBy,\n      adminNotes: biometricRequests.adminNotes,\n      requestDate: biometricRequests.requestDate,\n      approvedDate: biometricRequests.approvedDate,\n      expiryDate: biometricRequests.expiryDate,\n      createdAt: biometricRequests.createdAt,\n      updatedAt: biometricRequests.updatedAt,\n      user: {\n        id: users.id,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        unitNumber: users.unitNumber,\n        role: users.role,\n      },\n    })\n    .from(biometricRequests)\n    .leftJoin(users, eq(biometricRequests.userId, users.id))\n    .where(eq(biometricRequests.userId, userId))\n    .orderBy(desc(biometricRequests.createdAt));\n\n    return requests as BiometricRequestWithUser[];\n  }\n\n  async createBiometricRequest(request: InsertBiometricRequest): Promise<BiometricRequest> {\n    const [newRequest] = await db\n      .insert(biometricRequests)\n      .values(request)\n      .returning();\n    return newRequest;\n  }\n\n  async updateBiometricRequest(id: string, updates: Partial<BiometricRequest>): Promise<BiometricRequest | undefined> {\n    const [updated] = await db\n      .update(biometricRequests)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(biometricRequests.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Tenant document operations\n  async getTenantDocuments(): Promise<TenantDocumentWithUser[]> {\n    const documents = await db.select({\n      id: tenantDocuments.id,\n      userId: tenantDocuments.userId,\n      documentType: tenantDocuments.documentType,\n      documentName: tenantDocuments.documentName,\n      filePath: tenantDocuments.filePath,\n      fileSize: tenantDocuments.fileSize,\n      mimeType: tenantDocuments.mimeType,\n      status: tenantDocuments.status,\n      reviewedBy: tenantDocuments.reviewedBy,\n      adminNotes: tenantDocuments.adminNotes,\n      uploadDate: tenantDocuments.uploadDate,\n      reviewDate: tenantDocuments.reviewDate,\n      expiryDate: tenantDocuments.expiryDate,\n      createdAt: tenantDocuments.createdAt,\n      updatedAt: tenantDocuments.updatedAt,\n      user: {\n        id: users.id,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        unitNumber: users.unitNumber,\n      },\n    })\n    .from(tenantDocuments)\n    .leftJoin(users, eq(tenantDocuments.userId, users.id))\n    .orderBy(desc(tenantDocuments.createdAt));\n\n    return documents as TenantDocumentWithUser[];\n  }\n\n  async getTenantDocumentsByUserId(userId: string): Promise<TenantDocumentWithUser[]> {\n    const documents = await db.select({\n      id: tenantDocuments.id,\n      userId: tenantDocuments.userId,\n      documentType: tenantDocuments.documentType,\n      documentName: tenantDocuments.documentName,\n      filePath: tenantDocuments.filePath,\n      fileSize: tenantDocuments.fileSize,\n      mimeType: tenantDocuments.mimeType,\n      status: tenantDocuments.status,\n      reviewedBy: tenantDocuments.reviewedBy,\n      adminNotes: tenantDocuments.adminNotes,\n      uploadDate: tenantDocuments.uploadDate,\n      reviewDate: tenantDocuments.reviewDate,\n      expiryDate: tenantDocuments.expiryDate,\n      createdAt: tenantDocuments.createdAt,\n      updatedAt: tenantDocuments.updatedAt,\n      user: {\n        id: users.id,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        unitNumber: users.unitNumber,\n      },\n    })\n    .from(tenantDocuments)\n    .leftJoin(users, eq(tenantDocuments.userId, users.id))\n    .where(eq(tenantDocuments.userId, userId))\n    .orderBy(desc(tenantDocuments.createdAt));\n\n    return documents as TenantDocumentWithUser[];\n  }\n\n  async createTenantDocument(document: InsertTenantDocument): Promise<TenantDocument> {\n    const [newDocument] = await db\n      .insert(tenantDocuments)\n      .values(document)\n      .returning();\n    return newDocument;\n  }\n\n  async updateTenantDocument(id: string, updates: Partial<TenantDocument>): Promise<TenantDocument | undefined> {\n    const [updated] = await db\n      .update(tenantDocuments)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(tenantDocuments.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Booking report operations\n  async getBookingReport(): Promise<BookingReport> {\n    // Get total bookings count\n    const totalBookingsResult = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(bookings);\n    const totalBookings = totalBookingsResult[0]?.count || 0;\n\n    // Get bookings by status\n    const activeBookingsResult = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(bookings)\n      .where(eq(bookings.status, 'confirmed'));\n    const activeBookings = activeBookingsResult[0]?.count || 0;\n\n    const cancelledBookingsResult = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(bookings)\n      .where(eq(bookings.status, 'cancelled'));\n    const cancelledBookings = cancelledBookingsResult[0]?.count || 0;\n\n    const completedBookingsResult = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(bookings)\n      .where(eq(bookings.status, 'completed'));\n    const completedBookings = completedBookingsResult[0]?.count || 0;\n\n    // Get popular amenities\n    const popularAmenitiesResult = await db\n      .select({\n        amenityName: amenities.name,\n        bookingCount: sql<number>`count(${bookings.id})`,\n      })\n      .from(bookings)\n      .leftJoin(amenities, eq(bookings.amenityId, amenities.id))\n      .groupBy(amenities.name)\n      .orderBy(desc(sql`count(${bookings.id})`))\n      .limit(5);\n\n    // Get bookings by month (last 12 months)\n    const bookingsByMonthResult = await db\n      .select({\n        month: sql<string>`TO_CHAR(${bookings.createdAt}, 'YYYY-MM')`,\n        count: sql<number>`count(*)`,\n      })\n      .from(bookings)\n      .where(gte(bookings.createdAt, sql`NOW() - INTERVAL '12 months'`))\n      .groupBy(sql`TO_CHAR(${bookings.createdAt}, 'YYYY-MM')`)\n      .orderBy(sql`TO_CHAR(${bookings.createdAt}, 'YYYY-MM')`);\n\n    // Get recent bookings (last 10)\n    const recentBookingsResult = await db\n      .select({\n        id: bookings.id,\n        amenityId: bookings.amenityId,\n        userId: bookings.userId,\n        bookingDate: bookings.bookingDate,\n        startTime: bookings.startTime,\n        endTime: bookings.endTime,\n        status: bookings.status,\n        notes: bookings.notes,\n        createdAt: bookings.createdAt,\n        amenity: amenities,\n        user: {\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          unitNumber: users.unitNumber,\n        }\n      })\n      .from(bookings)\n      .leftJoin(amenities, eq(bookings.amenityId, amenities.id))\n      .leftJoin(users, eq(bookings.userId, users.id))\n      .orderBy(desc(bookings.createdAt))\n      .limit(10);\n\n    const recentBookings = recentBookingsResult.filter(result => result.amenity !== null) as BookingWithAmenity[];\n\n    return {\n      totalBookings,\n      activeBookings,\n      cancelledBookings,\n      completedBookings,\n      popularAmenities: popularAmenitiesResult.map(item => ({\n        amenityName: item.amenityName || 'Unknown',\n        bookingCount: item.bookingCount,\n      })),\n      bookingsByMonth: bookingsByMonthResult.map(item => ({\n        month: item.month,\n        count: item.count,\n      })),\n      recentBookings,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":35172},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  pgEnum,\n  boolean,\n  date,\n  time,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User roles enum\nexport const userRoleEnum = pgEnum('user_role', ['resident', 'admin', 'super_admin', 'watchman']);\n\n// User status enum\nexport const userStatusEnum = pgEnum('user_status', ['active', 'pending', 'suspended']);\n\n// User storage table (required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  username: varchar(\"username\").unique(), // For local authentication\n  password: varchar(\"password\"), // Hashed password for local auth\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").default('resident').notNull(),\n  status: userStatusEnum(\"status\").default('pending').notNull(),\n  unitNumber: varchar(\"unit_number\"),\n  isOwner: boolean(\"is_owner\").default(true).notNull(),\n  ownerId: varchar(\"owner_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Post types enum\nexport const postTypeEnum = pgEnum('post_type', ['general', 'complaint', 'suggestion', 'event']);\n\n// Post status enum\nexport const postStatusEnum = pgEnum('post_status', ['active', 'resolved', 'frozen']);\n\n// Posts table\nexport const posts = pgTable(\"posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  content: text(\"content\").notNull(),\n  type: postTypeEnum(\"type\").default('general').notNull(),\n  status: postStatusEnum(\"status\").default('active').notNull(),\n  authorId: varchar(\"author_id\").notNull().references(() => users.id),\n  likes: integer(\"likes\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Comments table\nexport const comments = pgTable(\"comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  content: text(\"content\").notNull(),\n  postId: varchar(\"post_id\").notNull().references(() => posts.id, { onDelete: 'cascade' }),\n  authorId: varchar(\"author_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Amenity types enum\nexport const amenityTypeEnum = pgEnum('amenity_type', ['swimming_pool', 'pool_table', 'party_hall', 'guest_parking', 'gym']);\n\n// Amenities table\nexport const amenities = pgTable(\"amenities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  type: amenityTypeEnum(\"type\").notNull(),\n  location: varchar(\"location\", { length: 100 }),\n  maxSlots: integer(\"max_slots\").default(1).notNull(),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n});\n\n// Booking status enum\nexport const bookingStatusEnum = pgEnum('booking_status', ['confirmed', 'cancelled', 'completed']);\n\n// Bookings table\nexport const bookings = pgTable(\"bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  amenityId: varchar(\"amenity_id\").notNull().references(() => amenities.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  bookingDate: date(\"booking_date\").notNull(),\n  startTime: time(\"start_time\").notNull(),\n  endTime: time(\"end_time\").notNull(),\n  status: bookingStatusEnum(\"status\").default('confirmed').notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Guest notifications table\nexport const guestNotifications = pgTable(\"guest_notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  guestName: varchar(\"guest_name\", { length: 100 }).notNull(),\n  guestPhone: varchar(\"guest_phone\", { length: 20 }),\n  purpose: text(\"purpose\"),\n  arrivalTime: timestamp(\"arrival_time\"),\n  departureTime: timestamp(\"departure_time\"),\n  parkingSlot: varchar(\"parking_slot\", { length: 10 }),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  watchmanApproved: boolean(\"watchman_approved\").default(false).notNull(),\n  watchmanNotes: text(\"watchman_notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Direct messages table\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  senderId: varchar(\"sender_id\").notNull().references(() => users.id),\n  receiverId: varchar(\"receiver_id\").notNull().references(() => users.id),\n  content: text(\"content\").notNull(),\n  isRead: boolean(\"is_read\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Announcements table (for admin/committee broadcasts)\nexport const announcements = pgTable(\"announcements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  content: text(\"content\").notNull(),\n  authorId: varchar(\"author_id\").notNull().references(() => users.id),\n  targetRoles: text(\"target_roles\").array().default(['resident']).notNull(), // ['resident', 'watchman', 'admin']\n  isUrgent: boolean(\"is_urgent\").default(false).notNull(),\n  expiresAt: timestamp(\"expires_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Maintenance requests table\nexport const maintenanceRequests = pgTable(\"maintenance_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\").notNull(),\n  category: varchar(\"category\", { length: 50 }).notNull(), // 'plumbing', 'electrical', 'general', etc.\n  priority: varchar(\"priority\", { length: 20 }).default('medium').notNull(), // 'low', 'medium', 'high', 'urgent'\n  status: varchar(\"status\", { length: 20 }).default('pending').notNull(), // 'pending', 'assigned', 'in_progress', 'completed', 'cancelled'\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  unitNumber: varchar(\"unit_number\", { length: 10 }),\n  preferredTime: varchar(\"preferred_time\", { length: 100 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  owner: one(users, {\n    fields: [users.ownerId],\n    references: [users.id],\n    relationName: \"owner_tenant\",\n  }),\n  tenants: many(users, {\n    relationName: \"owner_tenant\",\n  }),\n  posts: many(posts),\n  comments: many(comments),\n  bookings: many(bookings),\n  guestNotifications: many(guestNotifications),\n  sentMessages: many(messages, { relationName: \"sender\" }),\n  receivedMessages: many(messages, { relationName: \"receiver\" }),\n  announcements: many(announcements),\n  maintenanceRequests: many(maintenanceRequests, { relationName: \"requester\" }),\n  assignedMaintenanceRequests: many(maintenanceRequests, { relationName: \"assignee\" }),\n}));\n\nexport const postsRelations = relations(posts, ({ one, many }) => ({\n  author: one(users, {\n    fields: [posts.authorId],\n    references: [users.id],\n  }),\n  comments: many(comments),\n}));\n\nexport const commentsRelations = relations(comments, ({ one }) => ({\n  post: one(posts, {\n    fields: [comments.postId],\n    references: [posts.id],\n  }),\n  author: one(users, {\n    fields: [comments.authorId],\n    references: [users.id],\n  }),\n}));\n\nexport const bookingsRelations = relations(bookings, ({ one }) => ({\n  amenity: one(amenities, {\n    fields: [bookings.amenityId],\n    references: [amenities.id],\n  }),\n  user: one(users, {\n    fields: [bookings.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const guestNotificationsRelations = relations(guestNotifications, ({ one }) => ({\n  user: one(users, {\n    fields: [guestNotifications.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  sender: one(users, {\n    fields: [messages.senderId],\n    references: [users.id],\n    relationName: \"sender\",\n  }),\n  receiver: one(users, {\n    fields: [messages.receiverId],\n    references: [users.id],\n    relationName: \"receiver\",\n  }),\n}));\n\nexport const announcementsRelations = relations(announcements, ({ one }) => ({\n  author: one(users, {\n    fields: [announcements.authorId],\n    references: [users.id],\n  }),\n}));\n\nexport const maintenanceRequestsRelations = relations(maintenanceRequests, ({ one }) => ({\n  user: one(users, {\n    fields: [maintenanceRequests.userId],\n    references: [users.id],\n    relationName: \"requester\",\n  }),\n  assignee: one(users, {\n    fields: [maintenanceRequests.assignedTo],\n    references: [users.id],\n    relationName: \"assignee\",\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPostSchema = createInsertSchema(posts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  likes: true,\n});\n\nexport const insertCommentSchema = createInsertSchema(comments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGuestNotificationSchema = createInsertSchema(guestNotifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAnnouncementSchema = createInsertSchema(announcements).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMaintenanceRequestSchema = createInsertSchema(maintenanceRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertPost = z.infer<typeof insertPostSchema>;\nexport type Post = typeof posts.$inferSelect;\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\nexport type Comment = typeof comments.$inferSelect;\nexport type Amenity = typeof amenities.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertGuestNotification = z.infer<typeof insertGuestNotificationSchema>;\nexport type GuestNotification = typeof guestNotifications.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertAnnouncement = z.infer<typeof insertAnnouncementSchema>;\nexport type Announcement = typeof announcements.$inferSelect;\nexport type InsertMaintenanceRequest = z.infer<typeof insertMaintenanceRequestSchema>;\nexport type MaintenanceRequest = typeof maintenanceRequests.$inferSelect;\n\n// Extended types for API responses\nexport type PostWithAuthor = Post & {\n  author: Pick<User, 'id' | 'firstName' | 'lastName' | 'unitNumber'>;\n  comments: (Comment & {\n    author: Pick<User, 'id' | 'firstName' | 'lastName' | 'unitNumber'>;\n  })[];\n};\n\nexport type BookingWithAmenity = Booking & {\n  amenity: Amenity;\n  user: Pick<User, 'id' | 'firstName' | 'lastName' | 'unitNumber'>;\n};\n\nexport type MessageWithUsers = Message & {\n  sender: Pick<User, 'id' | 'firstName' | 'lastName' | 'unitNumber' | 'role'>;\n  receiver: Pick<User, 'id' | 'firstName' | 'lastName' | 'unitNumber' | 'role'>;\n};\n\nexport type AnnouncementWithAuthor = Announcement & {\n  author: Pick<User, 'id' | 'firstName' | 'lastName' | 'role'>;\n};\n\nexport type MaintenanceRequestWithUsers = MaintenanceRequest & {\n  user: Pick<User, 'id' | 'firstName' | 'lastName' | 'unitNumber'>;\n  assignee?: Pick<User, 'id' | 'firstName' | 'lastName' | 'role'> | null;\n};\n\nexport type GuestNotificationWithUser = GuestNotification & {\n  user: Pick<User, 'id' | 'firstName' | 'lastName' | 'unitNumber'>;\n};\n\n// Biometric access requests table\nexport const biometricRequests = pgTable(\"biometric_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  requestType: varchar(\"request_type\").notNull(), // 'fingerprint', 'facial', 'card'\n  reason: varchar(\"reason\"), // Why requesting access\n  accessLevel: varchar(\"access_level\").default('basic'), // 'basic', 'full', 'maintenance'\n  status: varchar(\"status\").notNull().default('pending'), // 'pending', 'approved', 'rejected'\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  adminNotes: varchar(\"admin_notes\"),\n  requestDate: timestamp(\"request_date\").defaultNow(),\n  approvedDate: timestamp(\"approved_date\"),\n  expiryDate: timestamp(\"expiry_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Tenant documents table\nexport const tenantDocuments = pgTable(\"tenant_documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  documentType: varchar(\"document_type\").notNull(), // 'lease', 'id_proof', 'income_proof', 'photo', 'other'\n  documentName: varchar(\"document_name\").notNull(),\n  filePath: varchar(\"file_path\").notNull(), // Object storage path\n  fileSize: varchar(\"file_size\"),\n  mimeType: varchar(\"mime_type\"),\n  status: varchar(\"status\").notNull().default('pending'), // 'pending', 'approved', 'rejected'\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  adminNotes: varchar(\"admin_notes\"),\n  uploadDate: timestamp(\"upload_date\").defaultNow(),\n  reviewDate: timestamp(\"review_date\"),\n  expiryDate: timestamp(\"expiry_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations for biometric requests\nexport const biometricRequestsRelations = relations(biometricRequests, ({ one }) => ({\n  user: one(users, {\n    fields: [biometricRequests.userId],\n    references: [users.id],\n  }),\n  approver: one(users, {\n    fields: [biometricRequests.approvedBy],\n    references: [users.id],\n  }),\n}));\n\n// Relations for tenant documents\nexport const tenantDocumentsRelations = relations(tenantDocuments, ({ one }) => ({\n  user: one(users, {\n    fields: [tenantDocuments.userId],\n    references: [users.id],\n  }),\n  reviewer: one(users, {\n    fields: [tenantDocuments.reviewedBy],\n    references: [users.id],\n  }),\n}));\n\n// New insert schemas\nexport const insertBiometricRequestSchema = createInsertSchema(biometricRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  requestDate: true,\n  approvedDate: true,\n});\n\nexport const insertTenantDocumentSchema = createInsertSchema(tenantDocuments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  uploadDate: true,\n  reviewDate: true,\n});\n\n// New types\nexport type BiometricRequest = typeof biometricRequests.$inferSelect;\nexport type InsertBiometricRequest = z.infer<typeof insertBiometricRequestSchema>;\nexport type TenantDocument = typeof tenantDocuments.$inferSelect;\nexport type InsertTenantDocument = z.infer<typeof insertTenantDocumentSchema>;\n\nexport type BiometricRequestWithUser = BiometricRequest & {\n  user: Pick<User, 'id' | 'firstName' | 'lastName' | 'unitNumber' | 'role'>;\n  approver?: Pick<User, 'id' | 'firstName' | 'lastName' | 'role'> | null;\n};\n\nexport type TenantDocumentWithUser = TenantDocument & {\n  user: Pick<User, 'id' | 'firstName' | 'lastName' | 'unitNumber'>;\n  reviewer?: Pick<User, 'id' | 'firstName' | 'lastName' | 'role'> | null;\n};\n\n// Booking report types\n// Password reset tokens table\nexport const passwordResetTokens = pgTable(\"password_reset_tokens\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  token: varchar(\"token\").notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  used: boolean(\"used\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Password reset tokens relations\nexport const passwordResetTokensRelations = relations(passwordResetTokens, ({ one }) => ({\n  user: one(users, {\n    fields: [passwordResetTokens.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schema for password reset tokens\nexport const insertPasswordResetTokenSchema = createInsertSchema(passwordResetTokens).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types for password reset\nexport type PasswordResetToken = typeof passwordResetTokens.$inferSelect;\nexport type InsertPasswordResetToken = z.infer<typeof insertPasswordResetTokenSchema>;\n\nexport type BookingReport = {\n  totalBookings: number;\n  activeBookings: number;\n  cancelledBookings: number;\n  completedBookings: number;\n  popularAmenities: { amenityName: string; bookingCount: number }[];\n  bookingsByMonth: { month: string; count: number }[];\n  recentBookings: BookingWithAmenity[];\n};\n","size_bytes":17404},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Admin from \"@/pages/admin\";\nimport NotFound from \"@/pages/not-found\";\nimport AuthPage from \"@/pages/auth-page\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/auth\" component={AuthPage} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/admin\" component={Admin} />\n          <Route path=\"/auth\" component={AuthPage} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1593},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 98%);\n  --foreground: hsl(210 25% 8%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(210 25% 8%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 8%);\n  --primary: hsl(207 90% 42%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(122 39% 49%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --accent: hsl(14 100% 57%);\n  --accent-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 2% 90%);\n  --muted-foreground: hsl(210 25% 8%);\n  --destructive: hsl(356 91% 54%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201 30% 91%);\n  --input: hsl(200 23% 97%);\n  --ring: hsl(203 89% 53%);\n  --chart-1: hsl(207 90% 42%);\n  --chart-2: hsl(122 39% 49%);\n  --chart-3: hsl(14 100% 57%);\n  --chart-4: hsl(147 79% 42%);\n  --chart-5: hsl(341 75% 51%);\n  --error: hsl(356 91% 54%);\n  --surface: hsl(0 0% 100%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 7% 91%);\n  --card: hsl(228 10% 10%);\n  --card-foreground: hsl(0 0% 85%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 7% 91%);\n  --primary: hsl(204 88% 53%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195 15% 95%);\n  --secondary-foreground: hsl(210 25% 8%);\n  --accent: hsl(206 70% 8%);\n  --accent-foreground: hsl(204 88% 53%);\n  --muted: hsl(0 0% 9%);\n  --muted-foreground: hsl(210 3% 46%);\n  --destructive: hsl(356 91% 54%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5% 15%);\n  --input: hsl(208 28% 18%);\n  --ring: hsl(203 89% 53%);\n  --chart-1: hsl(204 88% 53%);\n  --chart-2: hsl(122 39% 49%);\n  --chart-3: hsl(14 100% 57%);\n  --chart-4: hsl(147 79% 42%);\n  --chart-5: hsl(341 75% 51%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-roboto antialiased bg-background text-foreground;\n    font-family: 'Roboto', sans-serif;\n  }\n\n  .shadow-material {\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1), 0 8px 16px rgba(0,0,0,0.1);\n  }\n\n  .shadow-material-lg {\n    box-shadow: 0 4px 8px rgba(0,0,0,0.12), 0 16px 32px rgba(0,0,0,0.12);\n  }\n}\n","size_bytes":2227},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery<User | null>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    queryFn: async () => {\n      try {\n        const response = await fetch(\"/api/auth/user\", {\n          credentials: \"include\",\n        });\n        \n        if (!response.ok) {\n          if (response.status === 401) {\n            // User is not authenticated, return null instead of throwing\n            return null;\n          }\n          throw new Error(`HTTP ${response.status}`);\n        }\n        \n        return await response.json();\n      } catch (err) {\n        // Return null for any authentication errors\n        return null;\n      }\n    },\n  });\n\n  return {\n    user: user || null,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":1022},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, AlertTriangle, Calendar, BarChart } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { User, PostWithAuthor } from \"@shared/schema\";\n\nexport default function Admin() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const { data: users, isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: ['/api/users'],\n    enabled: user?.role === 'admin' || user?.role === 'super_admin',\n  });\n\n  const { data: complaints, isLoading: complaintsLoading } = useQuery<PostWithAuthor[]>({\n    queryKey: ['/api/posts', { type: 'complaint' }],\n    queryFn: async () => {\n      const response = await fetch('/api/posts?type=complaint');\n      return response.json();\n    },\n  });\n\n  const updateUserStatusMutation = useMutation({\n    mutationFn: async ({ userId, status }: { userId: string; status: string }) => {\n      return apiRequest('PATCH', `/api/users/${userId}/status`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      toast({\n        title: \"Success\",\n        description: \"User status updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resolveComplaintMutation = useMutation({\n    mutationFn: async ({ postId, status }: { postId: string; status: string }) => {\n      return apiRequest('PATCH', `/api/posts/${postId}/status`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/posts'] });\n      toast({\n        title: \"Success\",\n        description: \"Complaint status updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update complaint status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!user || (user.role !== 'admin' && user.role !== 'super_admin')) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center p-4\">\n        <Card className=\"max-w-md\">\n          <CardContent className=\"pt-6 text-center\">\n            <AlertTriangle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n            <h1 className=\"text-xl font-medium mb-2\">Access Denied</h1>\n            <p className=\"text-gray-600 mb-4\">You don't have permission to access the admin panel.</p>\n            <Button onClick={() => window.location.href = \"/\"} data-testid=\"button-home\">\n              Go Home\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-primary text-white p-4\">\n        <div className=\"max-w-md mx-auto\">\n          <h1 className=\"text-xl font-medium\">Admin Panel</h1>\n          <p className=\"text-blue-100 text-sm\">Ultima Skymax Connect</p>\n        </div>\n      </div>\n\n      <div className=\"max-w-md mx-auto p-4 space-y-6\">\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Card className=\"shadow-material\">\n            <CardContent className=\"p-4 text-center\">\n              <Users className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n              <p className=\"text-2xl font-bold\">{users?.length || 0}</p>\n              <p className=\"text-sm text-gray-600\">Total Users</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-material\">\n            <CardContent className=\"p-4 text-center\">\n              <AlertTriangle className=\"w-8 h-8 text-accent mx-auto mb-2\" />\n              <p className=\"text-2xl font-bold\">{complaints?.length || 0}</p>\n              <p className=\"text-sm text-gray-600\">Complaints</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* User Management */}\n        <Card className=\"shadow-material\">\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center space-x-2\">\n              <Users className=\"w-5 h-5\" />\n              <span>User Management</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {usersLoading ? (\n              <div className=\"text-center py-4\">\n                <div className=\"w-6 h-6 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-2\"></div>\n                <p className=\"text-sm text-gray-600\">Loading users...</p>\n              </div>\n            ) : (\n              users?.slice(0, 5).map((user: User) => (\n                <div key={user.id} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`user-${user.id}`}>\n                  <div>\n                    <p className=\"font-medium\">{user.firstName} {user.lastName}</p>\n                    <p className=\"text-sm text-gray-600\">Unit {user.unitNumber}</p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant={user.status === 'active' ? 'default' : user.status === 'pending' ? 'secondary' : 'destructive'}>\n                      {user.status}\n                    </Badge>\n                    {user.status === 'pending' && (\n                      <Button\n                        size=\"sm\"\n                        onClick={() => updateUserStatusMutation.mutate({ userId: user.id, status: 'active' })}\n                        disabled={updateUserStatusMutation.isPending}\n                        data-testid={`button-approve-${user.id}`}\n                      >\n                        Approve\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              ))\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Complaint Management */}\n        <Card className=\"shadow-material\">\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center space-x-2\">\n              <AlertTriangle className=\"w-5 h-5\" />\n              <span>Recent Complaints</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {complaintsLoading ? (\n              <div className=\"text-center py-4\">\n                <div className=\"w-6 h-6 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-2\"></div>\n                <p className=\"text-sm text-gray-600\">Loading complaints...</p>\n              </div>\n            ) : complaints?.length === 0 ? (\n              <p className=\"text-center text-gray-500 py-4\" data-testid=\"text-no-complaints\">No complaints found</p>\n            ) : (\n              complaints?.slice(0, 3).map((complaint: PostWithAuthor) => (\n                <div key={complaint.id} className=\"p-3 border rounded-lg space-y-2\" data-testid={`complaint-${complaint.id}`}>\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"font-medium\">{complaint.title}</h4>\n                    <Badge variant={complaint.status === 'active' ? 'destructive' : complaint.status === 'resolved' ? 'default' : 'secondary'}>\n                      {complaint.status}\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-gray-600\">{complaint.content.substring(0, 100)}...</p>\n                  <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                    <span>By {complaint.author.firstName} {complaint.author.lastName} (Unit {complaint.author.unitNumber})</span>\n                    {complaint.status === 'active' && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => resolveComplaintMutation.mutate({ postId: complaint.id, status: 'resolved' })}\n                        disabled={resolveComplaintMutation.isPending}\n                        data-testid={`button-resolve-${complaint.id}`}\n                      >\n                        Resolve\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              ))\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Card className=\"shadow-material\">\n            <CardContent className=\"p-4\">\n              <Button variant=\"outline\" className=\"w-full flex flex-col space-y-2 h-auto py-4\" data-testid=\"button-manage-bookings\">\n                <Calendar className=\"w-8 h-8 text-accent\" />\n                <span className=\"text-sm font-medium\">Manage Bookings</span>\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-material\">\n            <CardContent className=\"p-4\">\n              <Button variant=\"outline\" className=\"w-full flex flex-col space-y-2 h-auto py-4\" data-testid=\"button-view-reports\">\n                <BarChart className=\"w-8 h-8 text-secondary\" />\n                <span className=\"text-sm font-medium\">View Reports</span>\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10249},"client/src/pages/home.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { MobileLayout } from \"@/components/layout/MobileLayout\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Home() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return <MobileLayout />;\n}\n","size_bytes":1172},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Building, Shield, Calendar, Users, AlertTriangle, MessageCircle, Heart } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { PostWithAuthor } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\nexport default function Landing() {\n  // Fetch complaint posts for public viewing\n  const { data: complaints = [], isLoading } = useQuery<PostWithAuthor[]>({\n    queryKey: ['/api/posts', { type: 'complaint' }],\n    queryFn: async () => {\n      const response = await fetch('/api/posts?type=complaint');\n      return response.json();\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'active':\n        return <Badge variant=\"destructive\" className=\"text-xs\">Active</Badge>;\n      case 'resolved':\n        return <Badge variant=\"default\" className=\"text-xs bg-green-500 text-white\">Resolved</Badge>;\n      case 'frozen':\n        return <Badge variant=\"secondary\" className=\"text-xs\">Deferred</Badge>;\n      default:\n        return <Badge variant=\"outline\" className=\"text-xs\">Unknown</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-primary text-white p-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"w-16 h-16 bg-white rounded-full flex items-center justify-center mr-4\">\n              <Building className=\"text-primary w-8 h-8\" />\n            </div>\n            <div className=\"text-center\">\n              <h1 className=\"text-2xl font-medium\">Ultima Skymax Connect</h1>\n              <p className=\"text-blue-100\">Building Management System</p>\n            </div>\n          </div>\n          \n          <Button \n            onClick={() => window.location.href = '/api/login'}\n            className=\"w-full bg-white text-primary hover:bg-gray-100 font-medium py-3\"\n            data-testid=\"button-login\"\n          >\n            Sign In to Continue\n          </Button>\n        </div>\n      </div>\n\n      {/* Recent Complaints Section */}\n      <div className=\"p-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"mb-6\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <AlertTriangle className=\"w-5 h-5 text-orange-500\" />\n              <h2 className=\"text-xl font-medium\">Recent Building Complaints</h2>\n            </div>\n            \n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {[1, 2, 3].map((i) => (\n                  <Card key={i} className=\"animate-pulse\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : complaints.length > 0 ? (\n              <div className=\"space-y-4\">\n                {complaints.map((post) => (\n                  <Card key={post.id} className=\"border-l-4 border-l-orange-500\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <h3 className=\"font-medium text-lg text-gray-900\">{post.title}</h3>\n                        {getStatusBadge(post.status)}\n                      </div>\n                      \n                      <p className=\"text-gray-600 text-sm mb-3 line-clamp-2\">\n                        {post.content}\n                      </p>\n                      \n                      <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                        <div className=\"flex items-center gap-4\">\n                          <div className=\"flex items-center gap-1\">\n                            <Heart className=\"w-4 h-4\" />\n                            <span>{post.likes}</span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <MessageCircle className=\"w-4 h-4\" />\n                            <span>{post.comments?.length || 0} comments</span>\n                          </div>\n                        </div>\n                        <span>\n                          {post.createdAt ? format(new Date(post.createdAt), 'MMM d, yyyy') : 'Unknown date'}\n                        </span>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <AlertTriangle className=\"w-12 h-12 text-gray-400 mx-auto mb-3\" />\n                  <p className=\"text-gray-500\">No complaints reported recently</p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Features Section */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n            <Card className=\"text-center\">\n              <CardContent className=\"p-6\">\n                <Calendar className=\"w-8 h-8 text-primary mx-auto mb-3\" />\n                <h3 className=\"font-medium mb-2\">Easy Booking</h3>\n                <p className=\"text-sm text-gray-600\">Book amenities like pool, gym, party hall</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center\">\n              <CardContent className=\"p-6\">\n                <Users className=\"w-8 h-8 text-secondary mx-auto mb-3\" />\n                <h3 className=\"font-medium mb-2\">Community Feed</h3>\n                <p className=\"text-sm text-gray-600\">Stay connected with residents</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center\">\n              <CardContent className=\"p-6\">\n                <Shield className=\"w-8 h-8 text-accent mx-auto mb-3\" />\n                <h3 className=\"font-medium mb-2\">Smart Security</h3>\n                <p className=\"text-sm text-gray-600\">Guest notifications & alerts</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"text-center text-gray-500 text-sm\">\n            New resident? Contact admin for onboarding\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6493},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/admin/AdminDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Users, Settings, MessageSquare, Wrench, UserCheck, UserX, Shield, AlertTriangle } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { User, MaintenanceRequestWithUsers } from \"@shared/schema\";\n\nexport function AdminDashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState<'users' | 'maintenance'>('users');\n\n  const { data: users = [], isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: ['/api/users'],\n  });\n\n  const { data: maintenanceRequests = [], isLoading: requestsLoading } = useQuery<MaintenanceRequestWithUsers[]>({\n    queryKey: ['/api/maintenance-requests'],\n  });\n\n  const updateUserStatusMutation = useMutation({\n    mutationFn: async ({ userId, status }: { userId: string; status: string }) => {\n      return apiRequest('PATCH', `/api/users/${userId}/status`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      toast({\n        title: \"User updated\",\n        description: \"User status has been updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMaintenanceStatusMutation = useMutation({\n    mutationFn: async ({ requestId, status, assignedTo }: { requestId: string; status: string; assignedTo?: string }) => {\n      return apiRequest('PATCH', `/api/maintenance-requests/${requestId}/status`, { status, assignedTo });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/maintenance-requests'] });\n      toast({\n        title: \"Request updated\",\n        description: \"Maintenance request has been updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update maintenance request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-500 text-white';\n      case 'pending': return 'bg-yellow-500 text-white';\n      case 'suspended': return 'bg-red-500 text-white';\n      default: return 'bg-gray-500 text-white';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent': return 'bg-red-500 text-white';\n      case 'high': return 'bg-orange-500 text-white';\n      case 'medium': return 'bg-yellow-500 text-white';\n      case 'low': return 'bg-green-500 text-white';\n      default: return 'bg-gray-500 text-white';\n    }\n  };\n\n  const renderUsersTab = () => (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-3 gap-3\">\n        <Card className=\"bg-green-50 border-green-200\">\n          <CardContent className=\"p-3 text-center\">\n            <div className=\"text-xl font-bold text-green-600\">\n              {users.filter(u => u.status === 'active').length}\n            </div>\n            <div className=\"text-xs text-green-700\">Active Users</div>\n          </CardContent>\n        </Card>\n        <Card className=\"bg-yellow-50 border-yellow-200\">\n          <CardContent className=\"p-3 text-center\">\n            <div className=\"text-xl font-bold text-yellow-600\">\n              {users.filter(u => u.status === 'pending').length}\n            </div>\n            <div className=\"text-xs text-yellow-700\">Pending</div>\n          </CardContent>\n        </Card>\n        <Card className=\"bg-red-50 border-red-200\">\n          <CardContent className=\"p-3 text-center\">\n            <div className=\"text-xl font-bold text-red-600\">\n              {users.filter(u => u.status === 'suspended').length}\n            </div>\n            <div className=\"text-xs text-red-700\">Suspended</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {usersLoading ? (\n        <div className=\"space-y-3\">\n          {[...Array(5)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-4\">\n                <div className=\"h-4 bg-gray-300 rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-gray-300 rounded w-1/2\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"space-y-3\">\n          {users.map((user) => (\n            <Card key={user.id} className=\"shadow-md border border-gray-200\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                      <Users className=\"w-5 h-5 text-blue-600\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium text-gray-800\">\n                        {user.firstName} {user.lastName}\n                      </h4>\n                      <p className=\"text-sm text-gray-500\">\n                        {user.unitNumber ? `Unit ${user.unitNumber}` : user.role} â€¢ {user.email}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className={getStatusColor(user.status)}>\n                      {user.status}\n                    </Badge>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {user.role}\n                    </Badge>\n                  </div>\n                </div>\n\n                {user.status === 'pending' && (\n                  <div className=\"flex space-x-2 mt-3\">\n                    <Button\n                      size=\"sm\"\n                      onClick={() => updateUserStatusMutation.mutate({ userId: user.id, status: 'active' })}\n                      disabled={updateUserStatusMutation.isPending}\n                      className=\"bg-green-600 text-white hover:bg-green-700\"\n                      data-testid={`button-approve-${user.id}`}\n                    >\n                      <UserCheck className=\"w-4 h-4 mr-1\" />\n                      Approve\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => updateUserStatusMutation.mutate({ userId: user.id, status: 'suspended' })}\n                      disabled={updateUserStatusMutation.isPending}\n                      className=\"border-red-500 text-red-500 hover:bg-red-50\"\n                      data-testid={`button-suspend-${user.id}`}\n                    >\n                      <UserX className=\"w-4 h-4 mr-1\" />\n                      Suspend\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  const renderMaintenanceTab = () => (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-2 gap-3\">\n        <Card className=\"bg-orange-50 border-orange-200\">\n          <CardContent className=\"p-3 text-center\">\n            <div className=\"text-xl font-bold text-orange-600\">\n              {maintenanceRequests.filter(r => r.status === 'pending').length}\n            </div>\n            <div className=\"text-xs text-orange-700\">Pending Requests</div>\n          </CardContent>\n        </Card>\n        <Card className=\"bg-blue-50 border-blue-200\">\n          <CardContent className=\"p-3 text-center\">\n            <div className=\"text-xl font-bold text-blue-600\">\n              {maintenanceRequests.filter(r => r.status === 'in_progress').length}\n            </div>\n            <div className=\"text-xs text-blue-700\">In Progress</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {requestsLoading ? (\n        <div className=\"space-y-3\">\n          {[...Array(3)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-4\">\n                <div className=\"h-4 bg-gray-300 rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-gray-300 rounded w-1/2\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"space-y-3\">\n          {maintenanceRequests.map((request) => (\n            <Card key={request.id} className=\"shadow-md border border-gray-200\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center\">\n                      <Wrench className=\"w-5 h-5 text-purple-600\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium text-gray-800\">{request.title}</h4>\n                      <p className=\"text-sm text-gray-500\">\n                        Unit {request.unitNumber} â€¢ {request.user.firstName} {request.user.lastName}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex flex-col items-end space-y-1\">\n                    <Badge className={getPriorityColor(request.priority)}>\n                      {request.priority}\n                    </Badge>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {request.status}\n                    </Badge>\n                  </div>\n                </div>\n\n                <p className=\"text-sm text-gray-600 mb-3\">{request.description}</p>\n                \n                <div className=\"text-xs text-gray-500 mb-3\">\n                  Category: {request.category} â€¢ Created: {format(new Date(request.createdAt!), 'MMM d, yyyy')}\n                </div>\n\n                {request.status === 'pending' && (\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      size=\"sm\"\n                      onClick={() => updateMaintenanceStatusMutation.mutate({ \n                        requestId: request.id, \n                        status: 'in_progress' \n                      })}\n                      disabled={updateMaintenanceStatusMutation.isPending}\n                      className=\"bg-blue-600 text-white hover:bg-blue-700\"\n                      data-testid={`button-start-${request.id}`}\n                    >\n                      Start Work\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      onClick={() => updateMaintenanceStatusMutation.mutate({ \n                        requestId: request.id, \n                        status: 'completed' \n                      })}\n                      disabled={updateMaintenanceStatusMutation.isPending}\n                      className=\"bg-green-600 text-white hover:bg-green-700\"\n                      data-testid={`button-complete-${request.id}`}\n                    >\n                      Mark Complete\n                    </Button>\n                  </div>\n                )}\n\n                {request.status === 'in_progress' && (\n                  <Button\n                    size=\"sm\"\n                    onClick={() => updateMaintenanceStatusMutation.mutate({ \n                      requestId: request.id, \n                      status: 'completed' \n                    })}\n                    disabled={updateMaintenanceStatusMutation.isPending}\n                    className=\"bg-green-600 text-white hover:bg-green-700\"\n                    data-testid={`button-complete-${request.id}`}\n                  >\n                    Mark Complete\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-6 pb-24 px-4\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-purple-600 to-purple-700 rounded-xl p-4 text-white\">\n        <h2 className=\"text-lg font-semibold mb-1\">Admin Dashboard</h2>\n        <p className=\"text-purple-100 text-sm\">Manage users and building operations</p>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"flex bg-gray-100 rounded-lg p-1\">\n        <Button\n          variant={activeTab === 'users' ? 'default' : 'ghost'}\n          onClick={() => setActiveTab('users')}\n          className=\"flex-1 text-sm\"\n          data-testid=\"tab-users\"\n        >\n          <Users className=\"w-4 h-4 mr-2\" />\n          Users\n        </Button>\n        <Button\n          variant={activeTab === 'maintenance' ? 'default' : 'ghost'}\n          onClick={() => setActiveTab('maintenance')}\n          className=\"flex-1 text-sm\"\n          data-testid=\"tab-maintenance\"\n        >\n          <Wrench className=\"w-4 h-4 mr-2\" />\n          Maintenance\n        </Button>\n      </div>\n\n      {/* Tab Content */}\n      {activeTab === 'users' && renderUsersTab()}\n      {activeTab === 'maintenance' && renderMaintenanceTab()}\n    </div>\n  );\n}","size_bytes":13477},"client/src/components/bookings/BookingCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Waves, Circle, PartyPopper, Car, Dumbbell, Clock, MapPin, Info } from \"lucide-react\";\nimport type { Amenity } from \"@shared/schema\";\n\ninterface BookingCardProps {\n  amenity: Amenity;\n  onBook: (amenityId: string, amenityType: string) => void;\n}\n\nexport function BookingCard({ amenity, onBook }: BookingCardProps) {\n  const getAmenityIcon = (type: string) => {\n    switch (type) {\n      case 'swimming_pool':\n        return <Waves className=\"text-primary w-6 h-6\" />;\n      case 'pool_table':\n        return <Circle className=\"text-secondary w-6 h-6\" />;\n      case 'party_hall':\n        return <PartyPopper className=\"text-purple-600 w-6 h-6\" />;\n      case 'guest_parking':\n        return <Car className=\"text-accent w-6 h-6\" />;\n      case 'gym':\n        return <Dumbbell className=\"text-green-600 w-6 h-6\" />;\n      default:\n        return <Circle className=\"text-gray-600 w-6 h-6\" />;\n    }\n  };\n\n  const getAmenityIconBg = (type: string) => {\n    switch (type) {\n      case 'swimming_pool':\n        return 'bg-blue-100';\n      case 'pool_table':\n        return 'bg-green-100';\n      case 'party_hall':\n        return 'bg-purple-100';\n      case 'guest_parking':\n        return 'bg-orange-100';\n      case 'gym':\n        return 'bg-green-100';\n      default:\n        return 'bg-gray-100';\n    }\n  };\n\n  const getAmenityDetails = (type: string) => {\n    switch (type) {\n      case 'swimming_pool':\n        return {\n          hours: \"6 AM - 10 PM\",\n          info: \"Available slots: Morning (6-10 AM), Evening (6-10 PM)\"\n        };\n      case 'pool_table':\n        return {\n          hours: \"24/7\",\n          info: \"1-hour slots available\"\n        };\n      case 'party_hall':\n        return {\n          hours: \"Events Only\",\n          info: \"Full day booking required\"\n        };\n      case 'guest_parking':\n        return {\n          hours: \"24/7\",\n          info: \"Maximum 24 hours per booking\"\n        };\n      case 'gym':\n        return {\n          hours: \"5 AM - 11 PM\",\n          info: \"2-hour slots available\"\n        };\n      default:\n        return {\n          hours: \"Contact admin\",\n          info: \"Please contact admin for details\"\n        };\n    }\n  };\n\n  const details = getAmenityDetails(amenity.type);\n\n  return (\n    <Card className=\"shadow-material border border-gray-200\" data-testid={`amenity-${amenity.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start space-x-3\">\n          <div className={`w-12 h-12 ${getAmenityIconBg(amenity.type)} rounded-lg flex items-center justify-center flex-shrink-0`}>\n            {getAmenityIcon(amenity.type)}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-start justify-between mb-2\">\n              <div className=\"flex-1 pr-3\">\n                <h3 className=\"font-medium text-gray-800 mb-1\" data-testid={`text-name-${amenity.id}`}>\n                  {amenity.name}\n                </h3>\n                <p className=\"text-gray-500 text-sm flex items-center flex-wrap\">\n                  <MapPin className=\"w-3 h-3 mr-1 flex-shrink-0\" />\n                  <span className=\"mr-2\">{amenity.location}</span>\n                  <Clock className=\"w-3 h-3 mr-1 flex-shrink-0\" /> \n                  <span>{details.hours}</span>\n                </p>\n              </div>\n              <Button \n                onClick={() => onBook(amenity.id, amenity.type)}\n                className=\"bg-primary text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700 flex-shrink-0\"\n                data-testid={`button-book-${amenity.id}`}\n              >\n                Book Now\n              </Button>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"text-xs text-gray-500 flex items-start\">\n          <Info className=\"w-3 h-3 mr-1 mt-0.5 flex-shrink-0\" />\n          <span>{details.info}</span>\n        </div>\n        \n        {amenity.description && (\n          <p className=\"text-sm text-gray-600 mt-2\">{amenity.description}</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4214},"client/src/components/bookings/BookingModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { format, addDays } from \"date-fns\";\n\ninterface BookingModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  amenityId: string;\n  amenityName: string;\n  amenityType: string;\n}\n\nexport function BookingModal({ open, onOpenChange, amenityId, amenityName, amenityType }: BookingModalProps) {\n  const [bookingDate, setBookingDate] = useState(format(new Date(), 'yyyy-MM-dd'));\n  const [selectedSlot, setSelectedSlot] = useState<{ startTime: string; endTime: string } | null>(null);\n  const { toast } = useToast();\n\n  const getTimeSlots = (type: string) => {\n    switch (type) {\n      case 'swimming_pool':\n        return [\n          { time: \"6:00 AM\", startTime: \"06:00\", endTime: \"07:00\", label: \"6:00 - 7:00 AM\" },\n          { time: \"7:00 AM\", startTime: \"07:00\", endTime: \"08:00\", label: \"7:00 - 8:00 AM\" },\n          { time: \"8:00 AM\", startTime: \"08:00\", endTime: \"09:00\", label: \"8:00 - 9:00 AM\" },\n          { time: \"9:00 AM\", startTime: \"09:00\", endTime: \"10:00\", label: \"9:00 - 10:00 AM\" },\n          { time: \"6:00 PM\", startTime: \"18:00\", endTime: \"19:00\", label: \"6:00 - 7:00 PM\" },\n          { time: \"7:00 PM\", startTime: \"19:00\", endTime: \"20:00\", label: \"7:00 - 8:00 PM\" },\n          { time: \"8:00 PM\", startTime: \"20:00\", endTime: \"21:00\", label: \"8:00 - 9:00 PM\" },\n          { time: \"9:00 PM\", startTime: \"21:00\", endTime: \"22:00\", label: \"9:00 - 10:00 PM\" },\n        ];\n      case 'pool_table':\n        return Array.from({ length: 12 }, (_, i) => {\n          const hour = 9 + i;\n          const displayHour = hour > 12 ? hour - 12 : hour;\n          const ampm = hour >= 12 ? 'PM' : 'AM';\n          return {\n            time: `${displayHour}:00 ${ampm}`,\n            startTime: `${hour.toString().padStart(2, '0')}:00`,\n            endTime: `${(hour + 1).toString().padStart(2, '0')}:00`,\n            label: `${displayHour}:00 - ${displayHour + 1 > 12 ? displayHour + 1 - 12 : displayHour + 1}:00 ${hour + 1 >= 12 ? 'PM' : 'AM'}`\n          };\n        });\n      case 'party_hall':\n        return [\n          { time: \"Full Day\", startTime: \"00:00\", endTime: \"23:59\", label: \"Full Day Booking\" }\n        ];\n      case 'guest_parking':\n        return Array.from({ length: 24 }, (_, i) => {\n          const displayHour = i === 0 ? 12 : i > 12 ? i - 12 : i;\n          const ampm = i >= 12 ? 'PM' : 'AM';\n          return {\n            time: `${displayHour}:00 ${ampm}`,\n            startTime: `${i.toString().padStart(2, '0')}:00`,\n            endTime: `${((i + 24) % 24).toString().padStart(2, '0')}:00`,\n            label: `${displayHour}:00 ${ampm} - 24 hours`\n          };\n        });\n      case 'gym':\n        return Array.from({ length: 9 }, (_, i) => {\n          const hour = 5 + i * 2;\n          const displayHour = hour > 12 ? hour - 12 : hour === 0 ? 12 : hour;\n          const ampm = hour >= 12 ? 'PM' : 'AM';\n          const endHour = hour + 2;\n          const endDisplayHour = endHour > 12 ? endHour - 12 : endHour === 0 ? 12 : endHour;\n          const endAmpm = endHour >= 12 ? 'PM' : 'AM';\n          return {\n            time: `${displayHour}:00 ${ampm}`,\n            startTime: `${hour.toString().padStart(2, '0')}:00`,\n            endTime: `${endHour.toString().padStart(2, '0')}:00`,\n            label: `${displayHour}:00 ${ampm} - ${endDisplayHour}:00 ${endAmpm}`\n          };\n        });\n      default:\n        return [];\n    }\n  };\n\n  const createBookingMutation = useMutation({\n    mutationFn: async (bookingData: { amenityId: string; bookingDate: string; startTime: string; endTime: string }) => {\n      return apiRequest('POST', '/api/bookings', bookingData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      toast({\n        title: \"Success\",\n        description: \"Booking confirmed successfully\",\n      });\n      setSelectedSlot(null);\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create booking. The time slot might be unavailable.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedSlot) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a time slot\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createBookingMutation.mutate({\n      amenityId,\n      bookingDate,\n      startTime: selectedSlot.startTime,\n      endTime: selectedSlot.endTime,\n    });\n  };\n\n  const timeSlots = getTimeSlots(amenityType);\n  const minDate = format(new Date(), 'yyyy-MM-dd');\n  const maxDate = format(addDays(new Date(), 30), 'yyyy-MM-dd');\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md mx-auto max-h-96 overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Book {amenityName}</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"date\">Date</Label>\n            <Input\n              id=\"date\"\n              type=\"date\"\n              value={bookingDate}\n              onChange={(e) => setBookingDate(e.target.value)}\n              min={minDate}\n              max={maxDate}\n              className=\"focus:ring-2 focus:ring-primary\"\n              data-testid=\"input-date\"\n            />\n          </div>\n          \n          {timeSlots.length > 0 && (\n            <div>\n              <Label>Time Slot</Label>\n              <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                {timeSlots.map((slot, index) => (\n                  <Button\n                    key={index}\n                    type=\"button\"\n                    variant={selectedSlot?.startTime === slot.startTime ? \"default\" : \"outline\"}\n                    className={`text-sm h-auto py-2 ${\n                      selectedSlot?.startTime === slot.startTime \n                        ? 'bg-primary text-white' \n                        : 'hover:bg-primary hover:text-white'\n                    }`}\n                    onClick={() => setSelectedSlot({ startTime: slot.startTime, endTime: slot.endTime })}\n                    data-testid={`button-slot-${index}`}\n                  >\n                    {slot.time}\n                  </Button>\n                ))}\n              </div>\n              {selectedSlot && (\n                <p className=\"text-sm text-gray-600 mt-2\" data-testid=\"text-selected-slot\">\n                  Selected: {timeSlots.find(s => s.startTime === selectedSlot.startTime)?.label}\n                </p>\n              )}\n            </div>\n          )}\n          \n          <div className=\"flex space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              className=\"flex-1\"\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createBookingMutation.isPending || !selectedSlot}\n              className=\"flex-1 bg-primary hover:bg-blue-700\"\n              data-testid=\"button-confirm\"\n            >\n              {createBookingMutation.isPending ? \"Booking...\" : \"Confirm Booking\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8215},"client/src/components/community/PostCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ThumbsUp, MessageCircle, Calendar, MapPin, User } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { PostWithAuthor } from \"@shared/schema\";\n\ninterface PostCardProps {\n  post: PostWithAuthor;\n  onLike: (postId: string) => void;\n  onComment: (postId: string) => void;\n  isLiking?: boolean;\n}\n\nexport function PostCard({ post, onLike, onComment, isLiking }: PostCardProps) {\n  const getPostTypeColor = (type: string) => {\n    switch (type) {\n      case 'event':\n        return 'border-secondary';\n      case 'complaint':\n        return 'border-accent';\n      case 'suggestion':\n        return 'border-primary';\n      default:\n        return 'border-gray-200';\n    }\n  };\n\n  const getPostTypeIcon = (type: string) => {\n    switch (type) {\n      case 'event':\n        return <Calendar className=\"text-white w-4 h-4\" />;\n      case 'complaint':\n        return <User className=\"text-white w-4 h-4\" />;\n      case 'suggestion':\n        return <User className=\"text-white w-4 h-4\" />;\n      default:\n        return <User className=\"text-white w-4 h-4\" />;\n    }\n  };\n\n  const getPostTypeIconBg = (type: string) => {\n    switch (type) {\n      case 'event':\n        return 'bg-secondary';\n      case 'complaint':\n        return 'bg-gray-400';\n      case 'suggestion':\n        return 'bg-gray-400';\n      default:\n        return 'bg-gray-400';\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'active':\n        return <Badge variant=\"destructive\" className=\"text-xs\">Active</Badge>;\n      case 'resolved':\n        return <Badge className=\"bg-green-500 text-white text-xs\">Resolved</Badge>;\n      case 'frozen':\n        return <Badge variant=\"secondary\" className=\"text-xs\">Deferred</Badge>;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Card className={`shadow-material border-l-4 ${getPostTypeColor(post.type)}`} data-testid={`post-${post.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start space-x-3\">\n          <div className={`w-10 h-10 ${getPostTypeIconBg(post.type)} rounded-full flex items-center justify-center flex-shrink-0`}>\n            {getPostTypeIcon(post.type)}\n          </div>\n          \n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-start justify-between mb-2\">\n              <div className=\"flex-1 pr-2\">\n                <h3 className=\"font-medium text-gray-800\" data-testid={`text-title-${post.id}`}>\n                  {post.title}\n                </h3>\n              </div>\n              <div className=\"flex flex-col items-end gap-1 flex-shrink-0\">\n                {getStatusBadge(post.status)}\n                <span className=\"text-xs text-gray-500\">\n                  {post.author.unitNumber ? `Unit ${post.author.unitNumber}` : 'Admin'} â€¢ {format(new Date(post.createdAt!), 'MMM d')}\n                </span>\n              </div>\n            </div>\n            \n            {post.type !== 'general' && (\n              <Badge \n                className={`mb-2 text-xs ${\n                  post.type === 'event' ? 'bg-secondary text-white' : \n                  post.type === 'complaint' ? 'bg-accent text-white' : \n                  'bg-primary text-white'\n                }`}\n              >\n                {post.type.charAt(0).toUpperCase() + post.type.slice(1)}\n              </Badge>\n            )}\n            \n            <p className=\"text-gray-600 text-sm mb-3\" data-testid={`text-content-${post.id}`}>\n              {post.content}\n            </p>\n            \n            {post.type === 'event' && (\n              <div className=\"flex items-center justify-between text-xs text-gray-500 mb-3\">\n                <span className=\"flex items-center\">\n                  <Calendar className=\"w-3 h-3 mr-1\" />\n                  Event Details\n                </span>\n                <span className=\"flex items-center\">\n                  <MapPin className=\"w-3 h-3 mr-1\" />\n                  Location TBD\n                </span>\n              </div>\n            )}\n            \n            <div className=\"flex items-center justify-start pt-2 border-t border-gray-100\">\n              <div className=\"flex items-center space-x-6\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => onLike(post.id)}\n                  disabled={isLiking}\n                  className=\"text-primary hover:text-primary hover:bg-blue-50 px-2 py-1 h-8 rounded-md transition-colors\"\n                  data-testid={`button-like-${post.id}`}\n                >\n                  <ThumbsUp className=\"w-4 h-4 mr-2\" />\n                  <span className=\"text-sm\">{post.likes}</span>\n                </Button>\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => onComment(post.id)}\n                  className=\"text-gray-600 hover:text-gray-800 hover:bg-gray-50 px-2 py-1 h-8 rounded-md transition-colors\"\n                  data-testid={`button-comment-${post.id}`}\n                >\n                  <MessageCircle className=\"w-4 h-4 mr-2\" />\n                  <span className=\"text-sm\">{post.comments.length}</span>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5504},"client/src/components/community/PostModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface PostModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function PostModal({ open, onOpenChange }: PostModalProps) {\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [type, setType] = useState<string>(\"general\");\n  const { toast } = useToast();\n\n  const createPostMutation = useMutation({\n    mutationFn: async (postData: { title: string; content: string; type: string }) => {\n      return apiRequest('POST', '/api/posts', postData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/posts'] });\n      toast({\n        title: \"Success\",\n        description: \"Post created successfully\",\n      });\n      setTitle(\"\");\n      setContent(\"\");\n      setType(\"general\");\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!title.trim() || !content.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createPostMutation.mutate({ title, content, type });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md mx-auto\">\n        <DialogHeader>\n          <DialogTitle>Create New Post</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"type\">Post Type</Label>\n            <Select value={type} onValueChange={setType}>\n              <SelectTrigger data-testid=\"select-post-type\">\n                <SelectValue placeholder=\"Select post type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"general\">General</SelectItem>\n                <SelectItem value=\"complaint\">Complaint</SelectItem>\n                <SelectItem value=\"suggestion\">Suggestion</SelectItem>\n                <SelectItem value=\"event\">Event</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"title\">Title</Label>\n            <Input\n              id=\"title\"\n              type=\"text\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              placeholder=\"Enter post title\"\n              className=\"focus:ring-2 focus:ring-primary\"\n              data-testid=\"input-title\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"content\">Description</Label>\n            <Textarea\n              id=\"content\"\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n              placeholder=\"Describe your post...\"\n              rows={4}\n              className=\"focus:ring-2 focus:ring-primary resize-none\"\n              data-testid=\"input-content\"\n            />\n          </div>\n          \n          <div className=\"flex space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              className=\"flex-1\"\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createPostMutation.isPending}\n              className=\"flex-1 bg-primary hover:bg-blue-700\"\n              data-testid=\"button-submit\"\n            >\n              {createPostMutation.isPending ? \"Posting...\" : \"Post\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4799},"client/src/components/layout/BottomNav.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Home, Calendar, Settings, Shield, Users, MessageSquare } from \"lucide-react\";\n\ninterface BottomNavProps {\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n  userRole?: string;\n}\n\nexport function BottomNav({ activeTab, onTabChange, userRole }: BottomNavProps) {\n  // Define navigation tabs based on user role\n  const getTabs = () => {\n    if (userRole === 'watchman') {\n      return [\n        { id: 'watchman', label: 'Dashboard', icon: Shield },\n        { id: 'community', label: 'Community', icon: Home },\n        { id: 'services', label: 'Services', icon: Settings },\n      ];\n    }\n\n    if (userRole === 'admin' || userRole === 'super_admin') {\n      return [\n        { id: 'admin', label: 'Admin', icon: Users },\n        { id: 'community', label: 'Community', icon: Home },\n        { id: 'messages', label: 'Messages', icon: MessageSquare },\n        { id: 'services', label: 'Services', icon: Settings },\n      ];\n    }\n\n    // Regular resident navigation\n    return [\n      { id: 'community', label: 'Community', icon: Home },\n      { id: 'bookings', label: 'Bookings', icon: Calendar },\n      { id: 'messages', label: 'Messages', icon: MessageSquare },\n      { id: 'services', label: 'Services', icon: Settings },\n    ];\n  };\n\n  const tabs = getTabs();\n\n  return (\n    <nav className=\"fixed bottom-0 left-1/2 transform -translate-x-1/2 w-full max-w-md bg-white border-t border-gray-200 shadow-lg z-50\">\n      <div className=\"flex safe-area-pb\">\n        {tabs.map(({ id, label, icon: Icon }) => (\n          <Button\n            key={id}\n            variant=\"ghost\"\n            onClick={() => onTabChange(id)}\n            className={`flex-1 flex flex-col items-center justify-center py-3 px-1 min-h-[60px] text-sm font-medium transition-all duration-200 ${\n              activeTab === id\n                ? 'text-primary bg-blue-50 border-t-2 border-primary'\n                : 'text-gray-600 hover:text-gray-800 hover:bg-gray-50 border-t-2 border-transparent'\n            }`}\n            data-testid={`tab-${id}`}\n          >\n            <Icon className={`w-5 h-5 mb-1 transition-transform ${\n              activeTab === id ? 'scale-110' : 'scale-100'\n            }`} />\n            <span className={`text-xs font-medium leading-tight ${\n              activeTab === id ? 'text-primary' : 'text-gray-600'\n            }`}>\n              {label}\n            </span>\n          </Button>\n        ))}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2496},"client/src/components/layout/MobileLayout.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Building, Bell, User } from \"lucide-react\";\nimport { BottomNav } from \"./BottomNav\";\nimport { PostCard } from \"../community/PostCard\";\nimport { PostModal } from \"../community/PostModal\";\nimport { BookingCard } from \"../bookings/BookingCard\";\nimport { BookingModal } from \"../bookings/BookingModal\";\nimport { WatchmanDashboard } from \"../watchman/WatchmanDashboard\";\nimport { AdminDashboard } from \"../admin/AdminDashboard\";\nimport { MessagingTab } from \"../messaging/MessagingTab\";\nimport { BiometricAccessTab } from \"../access/BiometricAccessTab\";\nimport { TenantDocumentsTab } from \"../documents/TenantDocumentsTab\";\nimport { BookingReportsTab } from \"../admin/BookingReportsTab\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Plus, AlertTriangle, Calendar, Settings, Fingerprint, FileText, BarChart3 } from \"lucide-react\";\nimport type { PostWithAuthor, Amenity, BookingWithAmenity } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\nexport function MobileLayout() {\n  const { user } = useAuth();\n  \n  // Set default tab based on user role\n  const getDefaultTab = () => {\n    if (!user) return 'community';\n    switch (user.role) {\n      case 'watchman': return 'watchman';\n      case 'admin':\n      case 'super_admin': return 'admin';\n      default: return 'community';\n    }\n  };\n  \n  const [activeTab, setActiveTab] = useState(getDefaultTab());\n  const [activeServiceTab, setActiveServiceTab] = useState<string>('overview');\n  const [showPostModal, setShowPostModal] = useState(false);\n  const [showBookingModal, setShowBookingModal] = useState(false);\n  const [selectedAmenity, setSelectedAmenity] = useState<{ id: string; name: string; type: string } | null>(null);\n  const { toast } = useToast();\n\n  const { data: posts, isLoading: postsLoading } = useQuery<PostWithAuthor[]>({\n    queryKey: ['/api/posts'],\n    enabled: activeTab === 'community',\n  });\n\n  const { data: amenities, isLoading: amenitiesLoading } = useQuery<Amenity[]>({\n    queryKey: ['/api/amenities'],\n    enabled: activeTab === 'bookings',\n  });\n\n  const { data: bookings, isLoading: bookingsLoading } = useQuery<BookingWithAmenity[]>({\n    queryKey: ['/api/bookings'],\n    enabled: activeTab === 'bookings',\n  });\n\n  const likePostMutation = useMutation({\n    mutationFn: async (postId: string) => {\n      return apiRequest('POST', `/api/posts/${postId}/like`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/posts'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to like post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const cancelBookingMutation = useMutation({\n    mutationFn: async (bookingId: string) => {\n      return apiRequest('PATCH', `/api/bookings/${bookingId}/cancel`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      toast({\n        title: \"Success\",\n        description: \"Booking cancelled successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to cancel booking\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLike = (postId: string) => {\n    likePostMutation.mutate(postId);\n  };\n\n  const handleComment = (postId: string) => {\n    // TODO: Implement comment functionality\n    toast({\n      title: \"Coming Soon\",\n      description: \"Comment feature will be available soon\",\n    });\n  };\n\n  const handleBookAmenity = (amenityId: string, amenityType: string) => {\n    const amenity = amenities?.find((a: Amenity) => a.id === amenityId);\n    if (amenity) {\n      setSelectedAmenity({ id: amenityId, name: amenity.name, type: amenityType });\n      setShowBookingModal(true);\n    }\n  };\n\n  const renderCommunityTab = () => (\n    <div className=\"space-y-4 pb-20\">\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-2 gap-4 px-4 mb-6\">\n        <Button \n          onClick={() => setShowPostModal(true)}\n          className=\"bg-accent text-white p-4 rounded-xl shadow-md flex flex-col items-center justify-center gap-2 hover:bg-orange-600 transition-colors h-20\"\n          data-testid=\"button-new-post\"\n        >\n          <Plus className=\"w-6 h-6\" />\n          <span className=\"text-sm font-medium\">New Post</span>\n        </Button>\n        <Button \n          variant=\"outline\"\n          className=\"border-2 border-red-500 text-red-500 p-4 rounded-xl shadow-md flex flex-col items-center justify-center gap-2 hover:bg-red-50 transition-colors h-20\"\n          data-testid=\"button-complaints\"\n        >\n          <AlertTriangle className=\"w-6 h-6\" />\n          <span className=\"text-sm font-medium\">Complaints</span>\n        </Button>\n      </div>\n\n      {/* Community Feed */}\n      <div className=\"space-y-4 px-4\">\n        <h2 className=\"text-lg font-medium text-gray-800\" data-testid=\"text-community-feed\">Community Feed</h2>\n        \n        {postsLoading ? (\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <Card key={i} className=\"shadow-material\">\n                <CardContent className=\"p-4\">\n                  <div className=\"animate-pulse\">\n                    <div className=\"flex space-x-3\">\n                      <div className=\"w-10 h-10 bg-gray-300 rounded-full\"></div>\n                      <div className=\"flex-1 space-y-2\">\n                        <div className=\"h-4 bg-gray-300 rounded w-3/4\"></div>\n                        <div className=\"h-3 bg-gray-300 rounded w-1/2\"></div>\n                        <div className=\"h-16 bg-gray-300 rounded\"></div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : posts?.length === 0 ? (\n          <Card className=\"shadow-material\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Building className=\"w-8 h-8 text-gray-400\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No posts yet</h3>\n              <p className=\"text-gray-600 mb-4\">Be the first to share something with your community!</p>\n              <Button onClick={() => setShowPostModal(true)} data-testid=\"button-create-first-post\">\n                Create Your First Post\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          posts?.map((post: PostWithAuthor) => (\n            <PostCard\n              key={post.id}\n              post={post}\n              onLike={handleLike}\n              onComment={handleComment}\n              isLiking={likePostMutation.isPending}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n\n  const renderBookingsTab = () => (\n    <div className=\"space-y-6 pb-20 px-4\">\n      <h2 className=\"text-lg font-medium text-gray-800\" data-testid=\"text-amenity-bookings\">Amenity Bookings</h2>\n      \n      {/* Booking Options */}\n      <div className=\"space-y-4\">\n        {amenitiesLoading ? (\n          <div className=\"space-y-4\">\n            {[...Array(4)].map((_, i) => (\n              <Card key={i} className=\"shadow-material\">\n                <CardContent className=\"p-4\">\n                  <div className=\"animate-pulse flex items-center space-x-3\">\n                    <div className=\"w-12 h-12 bg-gray-300 rounded-lg\"></div>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-4 bg-gray-300 rounded w-1/2\"></div>\n                      <div className=\"h-3 bg-gray-300 rounded w-3/4\"></div>\n                    </div>\n                    <div className=\"w-20 h-8 bg-gray-300 rounded\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          amenities?.map((amenity: Amenity) => (\n            <BookingCard\n              key={amenity.id}\n              amenity={amenity}\n              onBook={handleBookAmenity}\n            />\n          ))\n        )}\n      </div>\n\n      {/* Current Bookings */}\n      <div>\n        <h3 className=\"text-md font-medium text-gray-800 mb-3\" data-testid=\"text-current-bookings\">Your Current Bookings</h3>\n        {bookingsLoading ? (\n          <div className=\"animate-pulse\">\n            <div className=\"h-20 bg-gray-200 rounded-lg\"></div>\n          </div>\n        ) : bookings?.length === 0 ? (\n          <Card className=\"shadow-material\">\n            <CardContent className=\"p-6 text-center\">\n              <Calendar className=\"w-12 h-12 text-gray-400 mx-auto mb-3\" />\n              <p className=\"text-gray-600\" data-testid=\"text-no-bookings\">No current bookings</p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-3\">\n            {bookings?.map((booking: BookingWithAmenity) => (\n              <Card key={booking.id} className=\"border border-green-200 bg-green-50\" data-testid={`booking-${booking.id}`}>\n                <CardContent className=\"p-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h4 className=\"font-medium text-green-800\" data-testid={`text-booking-name-${booking.id}`}>\n                        {booking.amenity.name}\n                      </h4>\n                      <p className=\"text-green-600 text-sm\" data-testid={`text-booking-time-${booking.id}`}>\n                        {format(new Date(booking.bookingDate), 'MMM d, yyyy')} â€¢ {booking.startTime} - {booking.endTime}\n                      </p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge className=\"bg-green-100 text-green-800\">\n                        {booking.status}\n                      </Badge>\n                      {booking.status === 'confirmed' && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => cancelBookingMutation.mutate(booking.id)}\n                          disabled={cancelBookingMutation.isPending}\n                          className=\"text-red-600 hover:text-red-800 text-xs\"\n                          data-testid={`button-cancel-${booking.id}`}\n                        >\n                          Cancel\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderServicesTab = () => {\n    // Define service tabs based on user role\n    const getServiceTabs = () => {\n      const baseTabs = [\n        { id: 'overview', label: 'Overview', icon: Settings },\n        { id: 'biometric', label: 'Biometric', icon: Fingerprint },\n        { id: 'documents', label: 'Documents', icon: FileText },\n      ];\n\n      // Add reports tab for admins\n      if (user?.role === 'admin' || user?.role === 'super_admin') {\n        baseTabs.push({ id: 'reports', label: 'Reports', icon: BarChart3 });\n      }\n\n      return baseTabs;\n    };\n\n    const serviceTabs = getServiceTabs();\n\n    return (\n      <div className=\"pb-24\">\n        {/* Service Tab Navigation */}\n        <div className=\"sticky top-0 bg-white z-10 border-b\">\n          <div className=\"flex overflow-x-auto px-4 py-2\">\n            {serviceTabs.map(({ id, label, icon: Icon }) => (\n              <Button\n                key={id}\n                variant=\"ghost\"\n                onClick={() => setActiveServiceTab(id)}\n                className={`flex items-center gap-2 px-4 py-2 whitespace-nowrap mr-2 transition-all ${\n                  activeServiceTab === id\n                    ? 'text-primary bg-blue-50 border-b-2 border-primary'\n                    : 'text-gray-600 hover:text-gray-900'\n                }`}\n                data-testid={`service-tab-${id}`}\n              >\n                <Icon className=\"w-4 h-4\" />\n                {label}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* Service Tab Content */}\n        <div className=\"px-4 pt-4\">\n          {activeServiceTab === 'overview' && (\n            <div className=\"space-y-6\">\n              <h2 className=\"text-lg font-medium text-gray-800\">Building Services</h2>\n              \n              {/* Admin Panel (Conditional) */}\n              {(user?.role === 'admin' || user?.role === 'super_admin') && (\n                <Card className=\"shadow-md border border-gray-200 bg-white\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h3 className=\"font-medium text-gray-800 flex items-center space-x-2\">\n                        <div className=\"w-8 h-8 bg-secondary bg-opacity-10 rounded-lg flex items-center justify-center\">\n                          <Settings className=\"w-4 h-4 text-secondary\" />\n                        </div>\n                        <span>Admin Panel</span>\n                      </h3>\n                    </div>\n                    <Button \n                      onClick={() => window.location.href = '/admin'}\n                      className=\"w-full bg-secondary text-white hover:bg-green-700 py-3 rounded-lg font-medium\"\n                      data-testid=\"button-admin-panel\"\n                    >\n                      Access Admin Panel\n                    </Button>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Quick Service Access */}\n              <Card className=\"shadow-md border border-gray-200 bg-white\">\n                <CardContent className=\"p-4\">\n                  <h3 className=\"font-medium text-gray-800 mb-4\">Quick Access</h3>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setActiveServiceTab('biometric')}\n                      className=\"flex flex-col items-center p-4 h-auto\"\n                      data-testid=\"button-quick-biometric\"\n                    >\n                      <Fingerprint className=\"w-6 h-6 mb-2 text-blue-600\" />\n                      <span className=\"text-sm\">Biometric Access</span>\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setActiveServiceTab('documents')}\n                      className=\"flex flex-col items-center p-4 h-auto\"\n                      data-testid=\"button-quick-documents\"\n                    >\n                      <FileText className=\"w-6 h-6 mb-2 text-green-600\" />\n                      <span className=\"text-sm\">Documents</span>\n                    </Button>\n                    {(user?.role === 'admin' || user?.role === 'super_admin') && (\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => setActiveServiceTab('reports')}\n                        className=\"flex flex-col items-center p-4 h-auto\"\n                        data-testid=\"button-quick-reports\"\n                      >\n                        <BarChart3 className=\"w-6 h-6 mb-2 text-purple-600\" />\n                        <span className=\"text-sm\">Reports</span>\n                      </Button>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Emergency Contacts */}\n              <Card className=\"shadow-md border border-gray-200 bg-white\">\n                <CardContent className=\"p-4\">\n                  <h3 className=\"font-medium text-gray-800 mb-4\">Emergency Contacts</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-3 hover:bg-gray-50 rounded-lg transition-colors\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-primary bg-opacity-10 rounded-full flex items-center justify-center\">\n                          <span className=\"text-primary text-sm font-semibold\">S</span>\n                        </div>\n                        <div>\n                          <span className=\"text-sm font-medium text-gray-800\">Security Desk</span>\n                          <p className=\"text-xs text-gray-500\">24/7 Available</p>\n                        </div>\n                      </div>\n                      <Button \n                        size=\"sm\" \n                        className=\"bg-primary text-white hover:bg-blue-700 px-4 py-2 rounded-md\"\n                        onClick={() => window.location.href = 'tel:+1234567890'}\n                        data-testid=\"button-call-security\"\n                      >\n                        Call\n                      </Button>\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 hover:bg-gray-50 rounded-lg transition-colors\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-secondary bg-opacity-10 rounded-full flex items-center justify-center\">\n                          <span className=\"text-secondary text-sm font-semibold\">M</span>\n                        </div>\n                        <div>\n                          <span className=\"text-sm font-medium text-gray-800\">Maintenance</span>\n                          <p className=\"text-xs text-gray-500\">9 AM - 6 PM</p>\n                        </div>\n                      </div>\n                      <Button \n                        size=\"sm\" \n                        className=\"bg-secondary text-white hover:bg-green-700 px-4 py-2 rounded-md\"\n                        onClick={() => window.location.href = 'tel:+1234567891'}\n                        data-testid=\"button-call-maintenance\"\n                      >\n                        Call\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {activeServiceTab === 'biometric' && <BiometricAccessTab />}\n          {activeServiceTab === 'documents' && <TenantDocumentsTab />}\n          {activeServiceTab === 'reports' && (user?.role === 'admin' || user?.role === 'super_admin') && <BookingReportsTab />}\n        </div>\n      </div>\n    );\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-md mx-auto bg-white min-h-screen flex flex-col\">\n      {/* Header */}\n      <header className=\"bg-primary text-white px-4 py-4 shadow-lg sticky top-0 z-10\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-white bg-opacity-20 rounded-full flex items-center justify-center\">\n              <Building className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"font-semibold text-lg leading-tight\">Ultima Skymax</h1>\n              <p className=\"text-blue-100 text-xs opacity-90\" data-testid=\"text-user-info\">\n                {user.unitNumber ? `Unit ${user.unitNumber}` : user.role} â€¢ {user.firstName} {user.lastName}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"relative p-2 rounded-full hover:bg-white hover:bg-opacity-20 text-white transition-colors\"\n              data-testid=\"button-notifications\"\n            >\n              <Bell className=\"w-5 h-5\" />\n              <span className=\"absolute -top-1 -right-1 bg-accent text-white text-xs rounded-full w-5 h-5 flex items-center justify-center font-medium\">3</span>\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={() => window.location.href = '/api/logout'}\n              className=\"p-2 rounded-full hover:bg-white hover:bg-opacity-20 text-white transition-colors\"\n              data-testid=\"button-logout\"\n            >\n              <User className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-auto bg-gray-50\">\n        <div className=\"pt-4\">\n          {activeTab === 'community' && renderCommunityTab()}\n          {activeTab === 'bookings' && renderBookingsTab()}\n          {activeTab === 'messages' && <MessagingTab />}\n          {activeTab === 'services' && renderServicesTab()}\n          {activeTab === 'watchman' && user?.role === 'watchman' && <WatchmanDashboard />}\n          {activeTab === 'admin' && (user?.role === 'admin' || user?.role === 'super_admin') && <AdminDashboard />}\n        </div>\n      </div>\n\n      {/* Bottom Navigation */}\n      <BottomNav activeTab={activeTab} onTabChange={setActiveTab} userRole={user?.role} />\n\n      {/* Modals */}\n      <PostModal open={showPostModal} onOpenChange={setShowPostModal} />\n      \n      {selectedAmenity && (\n        <BookingModal\n          open={showBookingModal}\n          onOpenChange={setShowBookingModal}\n          amenityId={selectedAmenity.id}\n          amenityName={selectedAmenity.name}\n          amenityType={selectedAmenity.type}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":22709},"client/src/components/messaging/MessagingTab.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MessageSquare, Send, User, Clock, Users } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { MessageWithUsers, User as UserType } from \"@shared/schema\";\n\nexport function MessagingTab() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showCompose, setShowCompose] = useState(false);\n  const [selectedReceiver, setSelectedReceiver] = useState(\"\");\n  const [messageContent, setMessageContent] = useState(\"\");\n\n  const { data: messages = [], isLoading: messagesLoading } = useQuery<MessageWithUsers[]>({\n    queryKey: ['/api/messages'],\n  });\n\n  const { data: users = [] } = useQuery<UserType[]>({\n    queryKey: ['/api/users'],\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (data: { receiverId: string; content: string }) => {\n      return apiRequest('POST', '/api/messages', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/messages'] });\n      setMessageContent(\"\");\n      setSelectedReceiver(\"\");\n      setShowCompose(false);\n      toast({\n        title: \"Message sent\",\n        description: \"Your message has been sent successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!selectedReceiver || !messageContent.trim()) {\n      toast({\n        title: \"Invalid message\",\n        description: \"Please select a recipient and enter a message\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    sendMessageMutation.mutate({\n      receiverId: selectedReceiver,\n      content: messageContent.trim(),\n    });\n  };\n\n  const adminUsers = users.filter(u => u.role === 'admin' || u.role === 'super_admin' || u.role === 'watchman');\n\n  if (messagesLoading) {\n    return (\n      <div className=\"space-y-4 px-4\">\n        {[...Array(3)].map((_, i) => (\n          <Card key={i} className=\"shadow-md\">\n            <CardContent className=\"p-4\">\n              <div className=\"animate-pulse\">\n                <div className=\"h-4 bg-gray-300 rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-gray-300 rounded w-1/2\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 pb-24 px-4\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"bg-gradient-to-r from-green-600 to-green-700 rounded-xl p-4 text-white flex-1 mr-3\">\n          <h2 className=\"text-lg font-semibold mb-1\">Messages</h2>\n          <p className=\"text-green-100 text-sm\">Communicate with committee and staff</p>\n        </div>\n        <Button\n          onClick={() => setShowCompose(!showCompose)}\n          className=\"bg-green-600 text-white hover:bg-green-700 px-4 py-8\"\n          data-testid=\"button-compose\"\n        >\n          <Send className=\"w-5 h-5\" />\n        </Button>\n      </div>\n\n      {/* Compose Message */}\n      {showCompose && (\n        <Card className=\"shadow-md border border-gray-200\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium text-gray-800 mb-4 flex items-center\">\n              <Send className=\"w-4 h-4 mr-2\" />\n              Compose Message\n            </h3>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Send to\n                </label>\n                <select\n                  value={selectedReceiver}\n                  onChange={(e) => setSelectedReceiver(e.target.value)}\n                  className=\"w-full border border-gray-300 rounded-md px-3 py-2 text-sm\"\n                  data-testid=\"select-receiver\"\n                >\n                  <option value=\"\">Select recipient...</option>\n                  <optgroup label=\"Committee & Staff\">\n                    {adminUsers.map((user) => (\n                      <option key={user.id} value={user.id}>\n                        {user.firstName} {user.lastName} ({user.role})\n                      </option>\n                    ))}\n                  </optgroup>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Message\n                </label>\n                <Textarea\n                  value={messageContent}\n                  onChange={(e) => setMessageContent(e.target.value)}\n                  placeholder=\"Type your message here...\"\n                  rows={4}\n                  className=\"w-full\"\n                  data-testid=\"textarea-message\"\n                />\n              </div>\n\n              <div className=\"flex space-x-2\">\n                <Button\n                  onClick={handleSendMessage}\n                  disabled={sendMessageMutation.isPending || !selectedReceiver || !messageContent.trim()}\n                  className=\"bg-green-600 text-white hover:bg-green-700\"\n                  data-testid=\"button-send\"\n                >\n                  <Send className=\"w-4 h-4 mr-2\" />\n                  Send Message\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowCompose(false)}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Messages List */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-medium text-gray-800\">Recent Messages</h3>\n        \n        {messages.length === 0 ? (\n          <Card className=\"shadow-md\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <MessageSquare className=\"w-8 h-8 text-gray-400\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No messages yet</h3>\n              <p className=\"text-gray-600 mb-4\">Start a conversation with the committee or building staff</p>\n              <Button\n                onClick={() => setShowCompose(true)}\n                className=\"bg-green-600 text-white hover:bg-green-700\"\n                data-testid=\"button-first-message\"\n              >\n                Send First Message\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          messages.map((message) => (\n            <Card key={message.id} className=\"shadow-md border border-gray-200 bg-white\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                      <User className=\"w-5 h-5 text-blue-600\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium text-gray-800\">\n                        From: {message.sender.firstName} {message.sender.lastName}\n                      </h4>\n                      <p className=\"text-sm text-gray-500\">\n                        {message.sender.role} â€¢ {message.sender.unitNumber ? `Unit ${message.sender.unitNumber}` : 'Staff'}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex flex-col items-end space-y-1\">\n                    {!message.isRead && (\n                      <Badge className=\"bg-green-500 text-white text-xs\">New</Badge>\n                    )}\n                    <div className=\"flex items-center text-xs text-gray-500\">\n                      <Clock className=\"w-3 h-3 mr-1\" />\n                      {format(new Date(message.createdAt!), 'MMM d, h:mm a')}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-50 p-3 rounded-lg\">\n                  <p className=\"text-sm text-gray-700\">{message.content}</p>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":8816},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/watchman/WatchmanDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Clock, User, Phone, MapPin, CheckCircle, XCircle, MessageSquare, Eye } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { GuestNotificationWithUser } from \"@shared/schema\";\n\nexport function WatchmanDashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: guestNotifications = [], isLoading } = useQuery<GuestNotificationWithUser[]>({\n    queryKey: ['/api/guest-notifications'],\n  });\n\n  const approveGuestMutation = useMutation({\n    mutationFn: async ({ notificationId, approved, notes }: { notificationId: string; approved: boolean; notes?: string }) => {\n      return apiRequest('PATCH', `/api/guest-notifications/${notificationId}/approve`, { approved, notes });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/guest-notifications'] });\n      toast({\n        title: \"Guest notification updated\",\n        description: \"Guest status has been updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update guest notification\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApproveGuest = (notificationId: string, approved: boolean, notes?: string) => {\n    approveGuestMutation.mutate({ notificationId, approved, notes });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4 p-4\">\n        {[...Array(3)].map((_, i) => (\n          <Card key={i} className=\"shadow-md\">\n            <CardContent className=\"p-4\">\n              <div className=\"animate-pulse\">\n                <div className=\"h-4 bg-gray-300 rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-gray-300 rounded w-1/2\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 pb-24 px-4\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-blue-700 rounded-xl p-4 text-white\">\n        <h2 className=\"text-lg font-semibold mb-1\">Watchman Dashboard</h2>\n        <p className=\"text-blue-100 text-sm\">Monitor guest arrivals and building security</p>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-2 gap-4\">\n        <Card className=\"bg-green-50 border-green-200\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {guestNotifications.filter(g => g.watchmanApproved).length}\n            </div>\n            <div className=\"text-sm text-green-700\">Approved Guests</div>\n          </CardContent>\n        </Card>\n        <Card className=\"bg-orange-50 border-orange-200\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-orange-600\">\n              {guestNotifications.filter(g => !g.watchmanApproved && g.isActive).length}\n            </div>\n            <div className=\"text-sm text-orange-700\">Pending Approval</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Guest Notifications */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-medium text-gray-800\">Active Guest Notifications</h3>\n        \n        {guestNotifications.length === 0 ? (\n          <Card className=\"shadow-md\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Eye className=\"w-8 h-8 text-gray-400\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No active guest notifications</h3>\n              <p className=\"text-gray-600\">All guests have been processed or no new arrivals</p>\n            </CardContent>\n          </Card>\n        ) : (\n          guestNotifications.map((notification) => (\n            <Card key={notification.id} className=\"shadow-md border border-gray-200 bg-white\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                      <User className=\"w-6 h-6 text-blue-600\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium text-gray-800\">{notification.guestName}</h4>\n                      <p className=\"text-sm text-gray-500\">\n                        Visiting Unit {notification.user.unitNumber} â€¢ {notification.user.firstName} {notification.user.lastName}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  {notification.watchmanApproved ? (\n                    <Badge className=\"bg-green-500 text-white\">\n                      <CheckCircle className=\"w-3 h-3 mr-1\" />\n                      Approved\n                    </Badge>\n                  ) : (\n                    <Badge variant=\"secondary\" className=\"bg-orange-100 text-orange-700\">\n                      Pending\n                    </Badge>\n                  )}\n                </div>\n\n                <div className=\"space-y-2 mb-4\">\n                  {notification.guestPhone && (\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <Phone className=\"w-4 h-4 mr-2\" />\n                      {notification.guestPhone}\n                    </div>\n                  )}\n                  \n                  {notification.purpose && (\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <MessageSquare className=\"w-4 h-4 mr-2\" />\n                      {notification.purpose}\n                    </div>\n                  )}\n                  \n                  {notification.arrivalTime && (\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <Clock className=\"w-4 h-4 mr-2\" />\n                      Expected: {format(new Date(notification.arrivalTime), 'MMM d, h:mm a')}\n                    </div>\n                  )}\n\n                  {notification.parkingSlot && (\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <MapPin className=\"w-4 h-4 mr-2\" />\n                      Parking: Slot {notification.parkingSlot}\n                    </div>\n                  )}\n                </div>\n\n                {notification.watchmanNotes && (\n                  <div className=\"bg-gray-50 p-3 rounded-lg mb-4\">\n                    <p className=\"text-sm text-gray-700\">\n                      <strong>Notes:</strong> {notification.watchmanNotes}\n                    </p>\n                  </div>\n                )}\n\n                {!notification.watchmanApproved && notification.isActive && (\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      onClick={() => handleApproveGuest(notification.id, true, \"Guest approved by watchman\")}\n                      disabled={approveGuestMutation.isPending}\n                      className=\"flex-1 bg-green-600 text-white hover:bg-green-700\"\n                      data-testid={`button-approve-${notification.id}`}\n                    >\n                      <CheckCircle className=\"w-4 h-4 mr-2\" />\n                      Approve Entry\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => handleApproveGuest(notification.id, false, \"Entry denied by watchman\")}\n                      disabled={approveGuestMutation.isPending}\n                      className=\"flex-1 border-red-500 text-red-500 hover:bg-red-50\"\n                      data-testid={`button-deny-${notification.id}`}\n                    >\n                      <XCircle className=\"w-4 h-4 mr-2\" />\n                      Deny Entry\n                    </Button>\n                  </div>\n                )}\n\n                <div className=\"text-xs text-gray-500 mt-3\">\n                  Notification created: {format(new Date(notification.createdAt!), 'MMM d, yyyy h:mm a')}\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":8684},"client/src/components/access/BiometricAccessTab.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Fingerprint, Shield, Clock, CheckCircle, XCircle, AlertTriangle } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nconst requestFormSchema = z.object({\n  requestType: z.enum([\"fingerprint\", \"facial\", \"card\"]),\n  reason: z.string().min(10, \"Please provide a detailed reason\"),\n  accessLevel: z.enum([\"basic\", \"full\", \"maintenance\"]).default(\"basic\"),\n});\n\ntype RequestFormData = z.infer<typeof requestFormSchema>;\n\nexport function BiometricAccessTab() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [showNewRequestForm, setShowNewRequestForm] = useState(false);\n\n  const { data: requests, isLoading } = useQuery({\n    queryKey: [\"/api/biometric-requests\"],\n  });\n\n  const form = useForm<RequestFormData>({\n    resolver: zodResolver(requestFormSchema),\n    defaultValues: {\n      requestType: \"fingerprint\",\n      accessLevel: \"basic\",\n      reason: \"\",\n    },\n  });\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (data: RequestFormData) => {\n      const response = await fetch(\"/api/biometric-requests\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to create request\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/biometric-requests\"] });\n      form.reset();\n      setShowNewRequestForm(false);\n    },\n  });\n\n  const updateRequestMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {\n      const response = await fetch(`/api/biometric-requests/${id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(updates),\n      });\n      if (!response.ok) throw new Error(\"Failed to update request\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/biometric-requests\"] });\n    },\n  });\n\n  const onSubmit = (data: RequestFormData) => {\n    createRequestMutation.mutate(data);\n  };\n\n  const handleApproval = (requestId: string, status: 'approved' | 'rejected', adminNotes?: string) => {\n    updateRequestMutation.mutate({\n      id: requestId,\n      updates: { status, adminNotes },\n    });\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'rejected':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      case 'pending':\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n      default:\n        return <AlertTriangle className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return 'bg-green-100 text-green-800';\n      case 'rejected':\n        return 'bg-red-100 text-red-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getRequestTypeIcon = (type: string) => {\n    switch (type) {\n      case 'fingerprint':\n        return <Fingerprint className=\"h-4 w-4\" />;\n      case 'facial':\n        return <Shield className=\"h-4 w-4\" />;\n      case 'card':\n        return <Shield className=\"h-4 w-4\" />;\n      default:\n        return <Shield className=\"h-4 w-4\" />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"h-32 bg-gray-100 rounded animate-pulse\" />\n        <div className=\"h-32 bg-gray-100 rounded animate-pulse\" />\n      </div>\n    );\n  }\n\n  const isAdmin = user?.role === 'admin' || user?.role === 'super_admin';\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Biometric Access</h2>\n          <p className=\"text-gray-600\">Manage biometric access requests for enhanced security</p>\n        </div>\n        {!isAdmin && (\n          <Button \n            onClick={() => setShowNewRequestForm(!showNewRequestForm)}\n            data-testid=\"button-new-request\"\n          >\n            New Request\n          </Button>\n        )}\n      </div>\n\n      {/* New Request Form */}\n      {showNewRequestForm && !isAdmin && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Request Biometric Access</CardTitle>\n            <CardDescription>\n              Submit a request for biometric access to building facilities\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"requestType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Access Type</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-request-type\">\n                            <SelectValue placeholder=\"Select access type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"fingerprint\">Fingerprint Access</SelectItem>\n                          <SelectItem value=\"facial\">Facial Recognition</SelectItem>\n                          <SelectItem value=\"card\">Access Card</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"accessLevel\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Access Level</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-access-level\">\n                            <SelectValue placeholder=\"Select access level\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"basic\">Basic Access (Common Areas)</SelectItem>\n                          <SelectItem value=\"full\">Full Access (All Amenities)</SelectItem>\n                          <SelectItem value=\"maintenance\">Maintenance Access (Staff Only)</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"reason\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Reason for Request</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Please explain why you need biometric access...\"\n                          {...field}\n                          data-testid=\"textarea-reason\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex gap-2\">\n                  <Button\n                    type=\"submit\"\n                    disabled={createRequestMutation.isPending}\n                    data-testid=\"button-submit-request\"\n                  >\n                    {createRequestMutation.isPending ? \"Submitting...\" : \"Submit Request\"}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setShowNewRequestForm(false)}\n                    data-testid=\"button-cancel-request\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Requests List */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold\">\n          {isAdmin ? \"All Access Requests\" : \"Your Access Requests\"}\n        </h3>\n        \n        {requests && Array.isArray(requests) && requests.length > 0 ? (\n          requests.map((request: any) => (\n            <Card key={request.id} data-testid={`card-request-${request.id}`}>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"p-2 bg-blue-100 rounded-lg\">\n                      {getRequestTypeIcon(request.requestType)}\n                    </div>\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <h4 className=\"font-medium\">\n                          {request.requestType.charAt(0).toUpperCase() + request.requestType.slice(1)} Access\n                        </h4>\n                        <Badge className={getStatusColor(request.status)}>\n                          <div className=\"flex items-center gap-1\">\n                            {getStatusIcon(request.status)}\n                            {request.status.charAt(0).toUpperCase() + request.status.slice(1)}\n                          </div>\n                        </Badge>\n                      </div>\n                      {isAdmin && (\n                        <p className=\"text-sm text-gray-600\">\n                          Requested by: {request.user?.firstName} {request.user?.lastName} (Unit {request.user?.unitNumber})\n                        </p>\n                      )}\n                      <p className=\"text-sm\">\n                        <span className=\"font-medium\">Access Level:</span> {request.accessLevel}\n                      </p>\n                      <p className=\"text-sm\">\n                        <span className=\"font-medium\">Reason:</span> {request.reason}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        Requested on {format(new Date(request.requestDate), \"MMM dd, yyyy 'at' h:mm a\")}\n                      </p>\n                      {request.adminNotes && (\n                        <p className=\"text-sm\">\n                          <span className=\"font-medium\">Admin Notes:</span> {request.adminNotes}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Admin Actions */}\n                  {isAdmin && request.status === 'pending' && (\n                    <div className=\"flex gap-2\">\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleApproval(request.id, 'approved')}\n                        disabled={updateRequestMutation.isPending}\n                        data-testid={`button-approve-${request.id}`}\n                      >\n                        Approve\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleApproval(request.id, 'rejected')}\n                        disabled={updateRequestMutation.isPending}\n                        data-testid={`button-reject-${request.id}`}\n                      >\n                        Reject\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center py-8\">\n                <Shield className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Access Requests</h3>\n                <p className=\"text-gray-600\">\n                  {isAdmin ? \"No biometric access requests have been submitted yet.\" : \"You haven't submitted any biometric access requests yet.\"}\n                </p>\n                {!isAdmin && (\n                  <Button\n                    className=\"mt-4\"\n                    onClick={() => setShowNewRequestForm(true)}\n                    data-testid=\"button-create-first-request\"\n                  >\n                    Submit Your First Request\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":13736},"client/src/components/admin/BookingReportsTab.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from \"recharts\";\nimport { Calendar, Users, TrendingUp, Activity, Clock } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n\nexport function BookingReportsTab() {\n  const { data: report, isLoading } = useQuery({\n    queryKey: [\"/api/booking-reports\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          {[...Array(4)].map((_, i) => (\n            <div key={i} className=\"h-32 bg-gray-100 rounded animate-pulse\" />\n          ))}\n        </div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div className=\"h-80 bg-gray-100 rounded animate-pulse\" />\n          <div className=\"h-80 bg-gray-100 rounded animate-pulse\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!report) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <p className=\"text-gray-500\">Unable to load booking reports</p>\n      </div>\n    );\n  }\n\n  const statusData = [\n    { name: \"Active\", value: report.activeBookings, color: \"#00C49F\" },\n    { name: \"Cancelled\", value: report.cancelledBookings, color: \"#FF8042\" },\n    { name: \"Completed\", value: report.completedBookings, color: \"#0088FE\" },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-2xl font-bold\">Booking Reports</h2>\n        <p className=\"text-gray-600\">Analytics and insights for amenity bookings</p>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Bookings</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-total-bookings\">\n                  {report.totalBookings}\n                </p>\n              </div>\n              <div className=\"p-3 bg-blue-100 rounded-lg\">\n                <Calendar className=\"h-6 w-6 text-blue-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Active Bookings</p>\n                <p className=\"text-2xl font-bold text-green-600\" data-testid=\"text-active-bookings\">\n                  {report.activeBookings}\n                </p>\n              </div>\n              <div className=\"p-3 bg-green-100 rounded-lg\">\n                <Activity className=\"h-6 w-6 text-green-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Completed</p>\n                <p className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-completed-bookings\">\n                  {report.completedBookings}\n                </p>\n              </div>\n              <div className=\"p-3 bg-blue-100 rounded-lg\">\n                <TrendingUp className=\"h-6 w-6 text-blue-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Cancelled</p>\n                <p className=\"text-2xl font-bold text-red-600\" data-testid=\"text-cancelled-bookings\">\n                  {report.cancelledBookings}\n                </p>\n              </div>\n              <div className=\"p-3 bg-red-100 rounded-lg\">\n                <Clock className=\"h-6 w-6 text-red-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Monthly Bookings Chart */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Bookings by Month</CardTitle>\n            <CardDescription>Booking trends over the last 12 months</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={report.bookingsByMonth}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"month\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Bar dataKey=\"count\" fill=\"#0088FE\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Booking Status Pie Chart */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Booking Status Distribution</CardTitle>\n            <CardDescription>Breakdown of booking statuses</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={statusData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    outerRadius={80}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                    label={({ name, value, percent }) => \n                      `${name}: ${value} (${(percent * 100).toFixed(0)}%)`\n                    }\n                  >\n                    {statusData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Popular Amenities */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Popular Amenities</CardTitle>\n          <CardDescription>Most frequently booked amenities</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {report.popularAmenities && report.popularAmenities.length > 0 ? (\n              report.popularAmenities.map((amenity: any, index: number) => (\n                <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <Badge variant=\"outline\" className=\"text-sm\">\n                      #{index + 1}\n                    </Badge>\n                    <span className=\"font-medium\">{amenity.amenityName}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-sm text-gray-600\">{amenity.bookingCount} bookings</span>\n                    <div \n                      className=\"h-2 bg-blue-500 rounded\"\n                      style={{ \n                        width: `${Math.max(20, (amenity.bookingCount / report.popularAmenities[0].bookingCount) * 100)}px` \n                      }}\n                    />\n                  </div>\n                </div>\n              ))\n            ) : (\n              <p className=\"text-gray-500 text-center py-4\">No amenity bookings found</p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Bookings */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Bookings</CardTitle>\n          <CardDescription>Latest booking activity</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {report.recentBookings && report.recentBookings.length > 0 ? (\n              report.recentBookings.map((booking: any) => (\n                <div key={booking.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"font-medium\">{booking.amenity?.name}</span>\n                      <Badge \n                        className={\n                          booking.status === 'confirmed' ? 'bg-green-100 text-green-800' :\n                          booking.status === 'cancelled' ? 'bg-red-100 text-red-800' :\n                          'bg-blue-100 text-blue-800'\n                        }\n                      >\n                        {booking.status}\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-gray-600\">\n                      {booking.user?.firstName} {booking.user?.lastName} (Unit {booking.user?.unitNumber})\n                    </p>\n                    <p className=\"text-sm text-gray-500\">\n                      {format(new Date(booking.bookingDate), \"MMM dd, yyyy\")} â€¢ {booking.startTime} - {booking.endTime}\n                    </p>\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    {format(new Date(booking.createdAt), \"MMM dd\")}\n                  </div>\n                </div>\n              ))\n            ) : (\n              <p className=\"text-gray-500 text-center py-4\">No recent bookings</p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9813},"client/src/components/documents/TenantDocumentsTab.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { FileText, Upload, Eye, Download, CheckCircle, XCircle, Clock } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nconst documentFormSchema = z.object({\n  documentType: z.enum([\"lease\", \"id_proof\", \"income_proof\", \"photo\", \"other\"]),\n  documentName: z.string().min(1, \"Document name is required\"),\n  filePath: z.string().min(1, \"File is required\"),\n  fileSize: z.string().optional(),\n  mimeType: z.string().optional(),\n});\n\ntype DocumentFormData = z.infer<typeof documentFormSchema>;\n\nexport function TenantDocumentsTab() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [showUploadForm, setShowUploadForm] = useState(false);\n  const [uploading, setUploading] = useState(false);\n\n  const { data: documents, isLoading } = useQuery({\n    queryKey: [\"/api/tenant-documents\"],\n  });\n\n  const form = useForm<DocumentFormData>({\n    resolver: zodResolver(documentFormSchema),\n    defaultValues: {\n      documentType: \"id_proof\",\n      documentName: \"\",\n      filePath: \"\",\n    },\n  });\n\n  const createDocumentMutation = useMutation({\n    mutationFn: async (data: DocumentFormData) => {\n      const response = await fetch(\"/api/tenant-documents\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to create document\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tenant-documents\"] });\n      form.reset();\n      setShowUploadForm(false);\n    },\n  });\n\n  const updateDocumentMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {\n      const response = await fetch(`/api/tenant-documents/${id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(updates),\n      });\n      if (!response.ok) throw new Error(\"Failed to update document\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tenant-documents\"] });\n    },\n  });\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setUploading(true);\n    try {\n      // Get upload URL\n      const uploadResponse = await fetch(\"/api/objects/upload\", {\n        method: \"POST\",\n      });\n      const { uploadURL } = await uploadResponse.json();\n\n      // Upload file\n      const uploadFileResponse = await fetch(uploadURL, {\n        method: \"PUT\",\n        body: file,\n      });\n\n      if (!uploadFileResponse.ok) {\n        throw new Error(\"Failed to upload file\");\n      }\n\n      // Update form with file info\n      form.setValue(\"filePath\", uploadURL);\n      form.setValue(\"fileSize\", file.size.toString());\n      form.setValue(\"mimeType\", file.type);\n      form.setValue(\"documentName\", file.name);\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const onSubmit = (data: DocumentFormData) => {\n    createDocumentMutation.mutate(data);\n  };\n\n  const handleReview = (documentId: string, status: 'approved' | 'rejected', adminNotes?: string) => {\n    updateDocumentMutation.mutate({\n      id: documentId,\n      updates: { status, adminNotes },\n    });\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'rejected':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      case 'pending':\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return 'bg-green-100 text-green-800';\n      case 'rejected':\n        return 'bg-red-100 text-red-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getDocumentTypeLabel = (type: string) => {\n    switch (type) {\n      case 'lease':\n        return 'Lease Agreement';\n      case 'id_proof':\n        return 'ID Proof';\n      case 'income_proof':\n        return 'Income Proof';\n      case 'photo':\n        return 'Photo ID';\n      case 'other':\n        return 'Other Document';\n      default:\n        return 'Document';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"h-32 bg-gray-100 rounded animate-pulse\" />\n        <div className=\"h-32 bg-gray-100 rounded animate-pulse\" />\n      </div>\n    );\n  }\n\n  const isAdmin = user?.role === 'admin' || user?.role === 'super_admin';\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Document Management</h2>\n          <p className=\"text-gray-600\">Upload and manage tenant documents</p>\n        </div>\n        {!isAdmin && (\n          <Button \n            onClick={() => setShowUploadForm(!showUploadForm)}\n            data-testid=\"button-upload-document\"\n          >\n            <Upload className=\"h-4 w-4 mr-2\" />\n            Upload Document\n          </Button>\n        )}\n      </div>\n\n      {/* Upload Form */}\n      {showUploadForm && !isAdmin && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Upload Document</CardTitle>\n            <CardDescription>\n              Upload required documents for verification\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"documentType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Document Type</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-document-type\">\n                            <SelectValue placeholder=\"Select document type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"lease\">Lease Agreement</SelectItem>\n                          <SelectItem value=\"id_proof\">ID Proof</SelectItem>\n                          <SelectItem value=\"income_proof\">Income Proof</SelectItem>\n                          <SelectItem value=\"photo\">Photo ID</SelectItem>\n                          <SelectItem value=\"other\">Other Document</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"documentName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Document Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter document name\"\n                          {...field}\n                          data-testid=\"input-document-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Upload File\n                  </label>\n                  <Input\n                    type=\"file\"\n                    onChange={handleFileUpload}\n                    disabled={uploading}\n                    accept=\".pdf,.jpg,.jpeg,.png,.doc,.docx\"\n                    data-testid=\"input-file-upload\"\n                  />\n                  {uploading && (\n                    <p className=\"text-sm text-gray-600 mt-1\">Uploading...</p>\n                  )}\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <Button\n                    type=\"submit\"\n                    disabled={createDocumentMutation.isPending || uploading}\n                    data-testid=\"button-submit-document\"\n                  >\n                    {createDocumentMutation.isPending ? \"Saving...\" : \"Save Document\"}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setShowUploadForm(false)}\n                    data-testid=\"button-cancel-upload\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Documents List */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold\">\n          {isAdmin ? \"All Documents\" : \"Your Documents\"}\n        </h3>\n        \n        {documents && Array.isArray(documents) && documents.length > 0 ? (\n          documents.map((document: any) => (\n            <Card key={document.id} data-testid={`card-document-${document.id}`}>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"p-2 bg-blue-100 rounded-lg\">\n                      <FileText className=\"h-4 w-4\" />\n                    </div>\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <h4 className=\"font-medium\">{document.documentName}</h4>\n                        <Badge className={getStatusColor(document.status)}>\n                          <div className=\"flex items-center gap-1\">\n                            {getStatusIcon(document.status)}\n                            {document.status.charAt(0).toUpperCase() + document.status.slice(1)}\n                          </div>\n                        </Badge>\n                      </div>\n                      {isAdmin && (\n                        <p className=\"text-sm text-gray-600\">\n                          Uploaded by: {document.user?.firstName} {document.user?.lastName} (Unit {document.user?.unitNumber})\n                        </p>\n                      )}\n                      <p className=\"text-sm\">\n                        <span className=\"font-medium\">Type:</span> {getDocumentTypeLabel(document.documentType)}\n                      </p>\n                      {document.fileSize && (\n                        <p className=\"text-sm\">\n                          <span className=\"font-medium\">Size:</span> {Math.round(parseInt(document.fileSize) / 1024)} KB\n                        </p>\n                      )}\n                      <p className=\"text-xs text-gray-500\">\n                        Uploaded on {format(new Date(document.uploadDate), \"MMM dd, yyyy 'at' h:mm a\")}\n                      </p>\n                      {document.adminNotes && (\n                        <p className=\"text-sm\">\n                          <span className=\"font-medium\">Admin Notes:</span> {document.adminNotes}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    {/* View/Download Button */}\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => window.open(document.filePath, '_blank')}\n                      data-testid={`button-view-${document.id}`}\n                    >\n                      <Eye className=\"h-4 w-4 mr-1\" />\n                      View\n                    </Button>\n\n                    {/* Admin Review Actions */}\n                    {isAdmin && document.status === 'pending' && (\n                      <>\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleReview(document.id, 'approved')}\n                          disabled={updateDocumentMutation.isPending}\n                          data-testid={`button-approve-${document.id}`}\n                        >\n                          Approve\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleReview(document.id, 'rejected')}\n                          disabled={updateDocumentMutation.isPending}\n                          data-testid={`button-reject-${document.id}`}\n                        >\n                          Reject\n                        </Button>\n                      </>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center py-8\">\n                <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Documents</h3>\n                <p className=\"text-gray-600\">\n                  {isAdmin ? \"No documents have been uploaded yet.\" : \"You haven't uploaded any documents yet.\"}\n                </p>\n                {!isAdmin && (\n                  <Button\n                    className=\"mt-4\"\n                    onClick={() => setShowUploadForm(true)}\n                    data-testid=\"button-upload-first-document\"\n                  >\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                    Upload Your First Document\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":14914},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Eye, EyeOff, Building, Users, Lock } from \"lucide-react\";\nimport { Redirect } from \"wouter\";\n\nexport default function AuthPage() {\n  const { user, isLoading } = useAuth();\n  const { toast } = useToast();\n  \n  const [loginForm, setLoginForm] = useState({ username: \"\", password: \"\" });\n  const [registerForm, setRegisterForm] = useState({\n    username: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    unitNumber: \"\"\n  });\n  const [forgotPasswordForm, setForgotPasswordForm] = useState({ email: \"\" });\n  const [resetPasswordForm, setResetPasswordForm] = useState({ token: \"\", newPassword: \"\" });\n  \n  const [showPassword, setShowPassword] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"login\");\n\n  // Redirect if already logged in\n  if (!isLoading && user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!loginForm.username || !loginForm.password) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter both username and password\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/local/login\", loginForm);\n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: \"Logged in successfully!\"\n        });\n        window.location.href = \"/\"; // Redirect to home\n      } else {\n        const data = await response.json();\n        toast({\n          title: \"Login Failed\",\n          description: data.message || \"Invalid credentials\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to login. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!registerForm.username || !registerForm.password || !registerForm.firstName || !registerForm.email) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/local/register\", registerForm);\n      const data = await response.json();\n      \n      if (response.ok) {\n        toast({\n          title: \"Registration Successful\",\n          description: data.message\n        });\n        setActiveTab(\"login\");\n        setRegisterForm({\n          username: \"\",\n          password: \"\",\n          firstName: \"\",\n          lastName: \"\",\n          email: \"\",\n          unitNumber: \"\"\n        });\n      } else {\n        toast({\n          title: \"Registration Failed\",\n          description: data.message || \"Registration failed\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to register. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleForgotPassword = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!forgotPasswordForm.email) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter your email address\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/forgot-password\", forgotPasswordForm);\n      const data = await response.json();\n      \n      toast({\n        title: \"Success\",\n        description: data.message\n      });\n      setForgotPasswordForm({ email: \"\" });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send reset email. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleResetPassword = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!resetPasswordForm.token || !resetPasswordForm.newPassword) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter both token and new password\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/reset-password\", resetPasswordForm);\n      const data = await response.json();\n      \n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: data.message\n        });\n        setActiveTab(\"login\");\n        setResetPasswordForm({ token: \"\", newPassword: \"\" });\n      } else {\n        toast({\n          title: \"Error\",\n          description: data.message || \"Failed to reset password\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to reset password. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-4xl grid md:grid-cols-2 gap-8 items-center\">\n        {/* Left side - Hero */}\n        <div className=\"text-center md:text-left space-y-6\">\n          <div className=\"space-y-4\">\n            <h1 className=\"text-4xl font-bold text-gray-900\">\n              Welcome to <span className=\"text-blue-600\">Ultima Skymax Connect</span>\n            </h1>\n            <p className=\"text-xl text-gray-600\">\n              Your comprehensive building management platform for seamless community living.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 gap-4\">\n            <div className=\"flex items-center gap-3 text-gray-700\">\n              <Building className=\"w-5 h-5 text-blue-600\" />\n              <span>15-Floor Residential Building Management</span>\n            </div>\n            <div className=\"flex items-center gap-3 text-gray-700\">\n              <Users className=\"w-5 h-5 text-blue-600\" />\n              <span>Community Posts & Resident Communication</span>\n            </div>\n            <div className=\"flex items-center gap-3 text-gray-700\">\n              <Lock className=\"w-5 h-5 text-blue-600\" />\n              <span>Secure Access & Amenity Booking</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Right side - Auth Forms */}\n        <Card className=\"w-full max-w-md mx-auto\">\n          <CardHeader>\n            <CardTitle>Access Your Account</CardTitle>\n            <CardDescription>\n              Sign in with your flat number or create a new account\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={setActiveTab}>\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n                <TabsTrigger value=\"register\">Sign Up</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"login\" className=\"space-y-4\">\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"username\">Username (Flat Number)</Label>\n                    <Input\n                      id=\"username\"\n                      type=\"text\"\n                      placeholder=\"e.g., 101a\"\n                      value={loginForm.username}\n                      onChange={(e) => setLoginForm({...loginForm, username: e.target.value})}\n                      data-testid=\"input-login-username\"\n                    />\n                    <p className=\"text-xs text-gray-500\">Use your flat number as username (e.g., 101a, 102b)</p>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"password\">Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"password\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Enter your password\"\n                        value={loginForm.password}\n                        onChange={(e) => setLoginForm({...loginForm, password: e.target.value})}\n                        data-testid=\"input-login-password\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                        onClick={() => setShowPassword(!showPassword)}\n                      >\n                        {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </Button>\n                    </div>\n                    <p className=\"text-xs text-gray-500\">Default password: Skymax123</p>\n                  </div>\n                  \n                  <Button type=\"submit\" className=\"w-full\" disabled={isSubmitting} data-testid=\"button-login\">\n                    {isSubmitting ? \"Signing In...\" : \"Sign In\"}\n                  </Button>\n                </form>\n                \n                <div className=\"space-y-2\">\n                  <Button\n                    variant=\"link\"\n                    className=\"w-full p-0 h-auto\"\n                    onClick={() => setActiveTab(\"forgot\")}\n                  >\n                    Forgot your password?\n                  </Button>\n                  \n                  <div className=\"text-center\">\n                    <span className=\"text-sm text-gray-500\">or</span>\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full\"\n                    onClick={() => window.location.href = \"/api/login\"}\n                  >\n                    Sign in with Replit\n                  </Button>\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"register\" className=\"space-y-4\">\n                <form onSubmit={handleRegister} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      <Input\n                        id=\"firstName\"\n                        type=\"text\"\n                        placeholder=\"First name\"\n                        value={registerForm.firstName}\n                        onChange={(e) => setRegisterForm({...registerForm, firstName: e.target.value})}\n                        data-testid=\"input-register-firstname\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"lastName\">Last Name</Label>\n                      <Input\n                        id=\"lastName\"\n                        type=\"text\"\n                        placeholder=\"Last name\"\n                        value={registerForm.lastName}\n                        onChange={(e) => setRegisterForm({...registerForm, lastName: e.target.value})}\n                        data-testid=\"input-register-lastname\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"your.email@example.com\"\n                      value={registerForm.email}\n                      onChange={(e) => setRegisterForm({...registerForm, email: e.target.value})}\n                      data-testid=\"input-register-email\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"regUsername\">Username (Flat Number)</Label>\n                    <Input\n                      id=\"regUsername\"\n                      type=\"text\"\n                      placeholder=\"e.g., 101a\"\n                      value={registerForm.username}\n                      onChange={(e) => setRegisterForm({...registerForm, username: e.target.value})}\n                      data-testid=\"input-register-username\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"unitNumber\">Unit Number</Label>\n                    <Input\n                      id=\"unitNumber\"\n                      type=\"text\"\n                      placeholder=\"e.g., 101A\"\n                      value={registerForm.unitNumber}\n                      onChange={(e) => setRegisterForm({...registerForm, unitNumber: e.target.value})}\n                      data-testid=\"input-register-unit\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"regPassword\">Password</Label>\n                    <Input\n                      id=\"regPassword\"\n                      type=\"password\"\n                      placeholder=\"Create a strong password\"\n                      value={registerForm.password}\n                      onChange={(e) => setRegisterForm({...registerForm, password: e.target.value})}\n                      data-testid=\"input-register-password\"\n                    />\n                  </div>\n                  \n                  <Button type=\"submit\" className=\"w-full\" disabled={isSubmitting} data-testid=\"button-register\">\n                    {isSubmitting ? \"Creating Account...\" : \"Create Account\"}\n                  </Button>\n                  \n                  <p className=\"text-xs text-gray-500 text-center\">\n                    Your account will require admin approval before activation.\n                  </p>\n                </form>\n              </TabsContent>\n            </Tabs>\n            \n            {activeTab === \"forgot\" && (\n              <div className=\"space-y-4\">\n                <div className=\"text-center\">\n                  <h3 className=\"text-lg font-semibold\">Reset Password</h3>\n                  <p className=\"text-sm text-gray-500\">Enter your email to receive a reset link</p>\n                </div>\n                \n                <form onSubmit={handleForgotPassword} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"forgotEmail\">Email</Label>\n                    <Input\n                      id=\"forgotEmail\"\n                      type=\"email\"\n                      placeholder=\"your.email@example.com\"\n                      value={forgotPasswordForm.email}\n                      onChange={(e) => setForgotPasswordForm({...forgotPasswordForm, email: e.target.value})}\n                      data-testid=\"input-forgot-email\"\n                    />\n                  </div>\n                  \n                  <Button type=\"submit\" className=\"w-full\" disabled={isSubmitting} data-testid=\"button-forgot-password\">\n                    {isSubmitting ? \"Sending...\" : \"Send Reset Link\"}\n                  </Button>\n                </form>\n                \n                <Button\n                  variant=\"link\"\n                  className=\"w-full p-0 h-auto\"\n                  onClick={() => setActiveTab(\"login\")}\n                >\n                  Back to Sign In\n                </Button>\n              </div>\n            )}\n            \n            {activeTab === \"reset\" && (\n              <div className=\"space-y-4\">\n                <div className=\"text-center\">\n                  <h3 className=\"text-lg font-semibold\">Reset Password</h3>\n                  <p className=\"text-sm text-gray-500\">Enter your reset token and new password</p>\n                </div>\n                \n                <form onSubmit={handleResetPassword} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"resetToken\">Reset Token</Label>\n                    <Input\n                      id=\"resetToken\"\n                      type=\"text\"\n                      placeholder=\"Enter the token from your email\"\n                      value={resetPasswordForm.token}\n                      onChange={(e) => setResetPasswordForm({...resetPasswordForm, token: e.target.value})}\n                      data-testid=\"input-reset-token\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"newPassword\">New Password</Label>\n                    <Input\n                      id=\"newPassword\"\n                      type=\"password\"\n                      placeholder=\"Enter your new password\"\n                      value={resetPasswordForm.newPassword}\n                      onChange={(e) => setResetPasswordForm({...resetPasswordForm, newPassword: e.target.value})}\n                      data-testid=\"input-reset-password\"\n                    />\n                  </div>\n                  \n                  <Button type=\"submit\" className=\"w-full\" disabled={isSubmitting} data-testid=\"button-reset-password\">\n                    {isSubmitting ? \"Resetting...\" : \"Reset Password\"}\n                  </Button>\n                </form>\n                \n                <Button\n                  variant=\"link\"\n                  className=\"w-full p-0 h-auto\"\n                  onClick={() => setActiveTab(\"login\")}\n                >\n                  Back to Sign In\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":18456},"scripts/create-admin.ts":{"content":"import { db } from \"../server/db\";\nimport { users } from \"../shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport { hashPassword } from \"../server/auth\";\n\nasync function createAdminUser() {\n  try {\n    console.log(\"Creating admin user...\");\n    \n    // Check if admin user already exists\n    const existingAdmin = await db\n      .select()\n      .from(users)\n      .where(eq(users.username, 'admin'))\n      .limit(1);\n    \n    if (existingAdmin.length > 0) {\n      console.log(\"Admin user already exists, updating password...\");\n      \n      // Update password for existing admin\n      const hashedPassword = await hashPassword('Skymax2018');\n      await db\n        .update(users)\n        .set({ \n          password: hashedPassword,\n          role: 'super_admin',\n          status: 'active',\n          updatedAt: new Date()\n        })\n        .where(eq(users.username, 'admin'));\n      \n      console.log(\"Admin user password updated successfully!\");\n    } else {\n      console.log(\"Creating new admin user...\");\n      \n      // Create new admin user\n      const hashedPassword = await hashPassword('Skymax2018');\n      await db.insert(users).values({\n        username: 'admin',\n        password: hashedPassword,\n        firstName: 'Admin',\n        lastName: 'User',\n        email: 'admin@ultimaskymax.com',\n        role: 'super_admin',\n        status: 'active',\n        isOwner: true,\n        unitNumber: null,\n      });\n      \n      console.log(\"Admin user created successfully!\");\n    }\n    \n    console.log(\"\\nAdmin Login Credentials:\");\n    console.log(\"Username: admin\");\n    console.log(\"Password: Skymax2018\");\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(\"Error creating admin user:\", error);\n    process.exit(1);\n  }\n}\n\ncreateAdminUser();","size_bytes":1770},"scripts/create-residents.ts":{"content":"import { hashPassword } from \"../server/auth\";\nimport { db } from \"../server/db\";\nimport { users } from \"@shared/schema\";\n\n// Parse the building resident data from the provided PDF\nconst buildingResidents = [\n  // Floor 1\n  { flatNo: \"101A\", name: \"\", isOwner: true, isTenant: false },\n  { flatNo: \"101B\", name: \"ANN JOSEPH\", isOwner: true, isTenant: false },\n  { flatNo: \"101B\", name: \"JOSEPH VAGHESE\", isOwner: false, isTenant: false },\n  { flatNo: \"101C\", name: \"NOORIN SHEREEF\", isOwner: false, isTenant: true },\n  { flatNo: \"101C\", name: \"FAHIM\", isOwner: false, isTenant: true },\n  { flatNo: \"101D\", name: \"PAUL\", isOwner: false, isTenant: true },\n  { flatNo: \"101D\", name: \"AKIN\", isOwner: false, isTenant: true },\n  { flatNo: \"101D\", name: \"REXY\", isOwner: false, isTenant: true },\n  { flatNo: \"101D\", name: \"ANIKA\", isOwner: false, isTenant: true },\n\n  // Floor 2\n  { flatNo: \"102A\", name: \"\", isOwner: true, isTenant: false },\n  { flatNo: \"102B\", name: \"VINAYAK SASIKUMAR\", isOwner: true, isTenant: false },\n  { flatNo: \"102B\", name: \"ANJALI\", isOwner: false, isTenant: false },\n  { flatNo: \"102C\", name: \"\", isOwner: true, isTenant: false },\n  { flatNo: \"102D\", name: \"JOSHY ABRAHAM\", isOwner: true, isTenant: false },\n  { flatNo: \"102D\", name: \"BETSY\", isOwner: false, isTenant: false },\n  { flatNo: \"102D\", name: \"ELIAMMA\", isOwner: false, isTenant: false },\n  { flatNo: \"102D\", name: \"JUDITH\", isOwner: false, isTenant: false },\n  { flatNo: \"102D\", name: \"JEREMY\", isOwner: false, isTenant: false },\n\n  // Floor 3\n  { flatNo: \"103A\", name: \"\", isOwner: true, isTenant: false },\n  { flatNo: \"103B\", name: \"JILS\", isOwner: false, isTenant: true },\n  { flatNo: \"103B\", name: \"ANIRUDH\", isOwner: false, isTenant: true },\n  { flatNo: \"103B\", name: \"NIDHI\", isOwner: false, isTenant: true },\n  { flatNo: \"103B\", name: \"LALITHA\", isOwner: false, isTenant: true },\n  { flatNo: \"103B\", name: \"ANU\", isOwner: false, isTenant: true },\n  { flatNo: \"103E\", name: \"SHAFI\", isOwner: false, isTenant: true },\n  { flatNo: \"103E\", name: \"SHAHIRA\", isOwner: false, isTenant: true },\n  { flatNo: \"103E\", name: \"ISHAL\", isOwner: false, isTenant: true },\n  { flatNo: \"103F\", name: \"AKHIL\", isOwner: true, isTenant: false },\n  { flatNo: \"103F\", name: \"ANILA\", isOwner: false, isTenant: false },\n  { flatNo: \"103G\", name: \"KIRAN\", isOwner: false, isTenant: true },\n  { flatNo: \"103G\", name: \"NEETHU\", isOwner: false, isTenant: true },\n\n  // Floor 4\n  { flatNo: \"104A\", name: \"VIPINDAS\", isOwner: true, isTenant: false },\n  { flatNo: \"104A\", name: \"BHAVANA\", isOwner: false, isTenant: false },\n  { flatNo: \"104B\", name: \"\", isOwner: true, isTenant: false },\n  { flatNo: \"104E\", name: \"\", isOwner: true, isTenant: false },\n  { flatNo: \"104F\", name: \"\", isOwner: true, isTenant: false },\n  { flatNo: \"104G\", name: \"RAJEEV\", isOwner: true, isTenant: false },\n  { flatNo: \"104G\", name: \"SANDHYA\", isOwner: false, isTenant: false },\n  { flatNo: \"104G\", name: \"RITHWIK\", isOwner: false, isTenant: false },\n\n  // Floor 5\n  { flatNo: \"105A\", name: \"SOJAN GEORGE\", isOwner: true, isTenant: false },\n  { flatNo: \"105A\", name: \"ANNAMMA GEORGE\", isOwner: false, isTenant: false },\n  { flatNo: \"105A\", name: \"SOSU\", isOwner: false, isTenant: false },\n  { flatNo: \"105A\", name: \"FIONA\", isOwner: false, isTenant: false },\n  { flatNo: \"105B\", name: \"NAVEEN\", isOwner: true, isTenant: false },\n  { flatNo: \"105B\", name: \"JAMES\", isOwner: false, isTenant: false },\n  { flatNo: \"105E\", name: \"\", isOwner: true, isTenant: false },\n  { flatNo: \"105F\", name: \"\", isOwner: true, isTenant: false },\n  { flatNo: \"105G\", name: \"SINITH\", isOwner: true, isTenant: false },\n  { flatNo: \"105G\", name: \"SHABNAM\", isOwner: false, isTenant: false },\n  { flatNo: \"105G\", name: \"ARNIKA\", isOwner: false, isTenant: false },\n\n  // Floor 6\n  { flatNo: \"106A\", name: \"\", isOwner: true, isTenant: false },\n  { flatNo: \"106B\", name: \"NITHYA\", isOwner: true, isTenant: false },\n  { flatNo: \"106B\", name: \"RAHUL\", isOwner: false, isTenant: false },\n  { flatNo: \"106B\", name: \"PRANAV\", isOwner: false, isTenant: false },\n  { flatNo: \"106E\", name: \"JAYAKUMAR\", isOwner: true, isTenant: false },\n  { flatNo: \"106E\", name: \"GREESHMA\", isOwner: false, isTenant: false },\n  { flatNo: \"106F\", name: \"SREEJITH\", isOwner: true, isTenant: false },\n  { flatNo: \"106F\", name: \"SMITHA\", isOwner: false, isTenant: false },\n  { flatNo: \"106F\", name: \"ADITHYA\", isOwner: false, isTenant: false },\n  { flatNo: \"106G\", name: \"MANICHAND\", isOwner: false, isTenant: true },\n  { flatNo: \"106G\", name: \"NIKHILA\", isOwner: false, isTenant: true },\n\n  // Floor 7\n  { flatNo: \"107G\", name: \"\", isOwner: true, isTenant: false },\n  { flatNo: \"107H\", name: \"LABEEBA\", isOwner: false, isTenant: true },\n  { flatNo: \"107H\", name: \"RASHEED\", isOwner: false, isTenant: true },\n  { flatNo: \"107H\", name: \"INARA\", isOwner: false, isTenant: true },\n  { flatNo: \"107I\", name: \"KAVYA\", isOwner: false, isTenant: true },\n  { flatNo: \"107I\", name: \"VINAY\", isOwner: false, isTenant: true },\n  { flatNo: \"107J\", name: \"AKSHAY\", isOwner: false, isTenant: true },\n  { flatNo: \"107K\", name: \"BIBIN\", isOwner: false, isTenant: true },\n  { flatNo: \"107K\", name: \"DIMPLE\", isOwner: false, isTenant: true },\n  { flatNo: \"107L\", name: \"YADHU\", isOwner: true, isTenant: false },\n  { flatNo: \"107L\", name: \"JESSY\", isOwner: false, isTenant: false },\n  { flatNo: \"107M\", name: \"TOBIN\", isOwner: true, isTenant: false },\n  { flatNo: \"107M\", name: \"VIJAYAN\", isOwner: false, isTenant: false },\n  { flatNo: \"107M\", name: \"RAJISHA\", isOwner: false, isTenant: false },\n  { flatNo: \"107M\", name: \"SHEELA\", isOwner: false, isTenant: false },\n  { flatNo: \"107M\", name: \"ANJU\", isOwner: false, isTenant: false },\n\n  // Floor 8\n  { flatNo: \"108G\", name: \"ASHOK KUMAR\", isOwner: false, isTenant: true },\n  { flatNo: \"108H\", name: \"ANJU\", isOwner: true, isTenant: false },\n  { flatNo: \"108H\", name: \"DHEERAJ\", isOwner: false, isTenant: false },\n  { flatNo: \"108I\", name: \"ROSHIN\", isOwner: true, isTenant: false },\n  { flatNo: \"108I\", name: \"REMANI\", isOwner: false, isTenant: false },\n  { flatNo: \"108I\", name: \"SHILPA\", isOwner: false, isTenant: false },\n  { flatNo: \"108I\", name: \"NAVNI\", isOwner: false, isTenant: false },\n  { flatNo: \"108J\", name: \"ANANTHU\", isOwner: false, isTenant: true },\n  { flatNo: \"108J\", name: \"KALPANA\", isOwner: false, isTenant: true },\n  { flatNo: \"108K\", name: \"RISANA\", isOwner: false, isTenant: true },\n  { flatNo: \"108K\", name: \"JASEEL\", isOwner: false, isTenant: true },\n  { flatNo: \"108L\", name: \"\", isOwner: true, isTenant: false },\n  { flatNo: \"108M\", name: \"ROHITH\", isOwner: false, isTenant: true },\n  { flatNo: \"108M\", name: \"RIYA\", isOwner: false, isTenant: true },\n\n  // Floor 9\n  { flatNo: \"109X\", name: \"\", isOwner: true, isTenant: false },\n  { flatNo: \"109Y\", name: \"\", isOwner: true, isTenant: false },\n  { flatNo: \"109Z\", name: \"\", isOwner: true, isTenant: false },\n\n  // Floor 10\n  { flatNo: \"110G\", name: \"RENJITH\", isOwner: false, isTenant: true },\n  { flatNo: \"110G\", name: \"DEVIKA\", isOwner: false, isTenant: true },\n  { flatNo: \"110H\", name: \"\", isOwner: true, isTenant: false },\n  { flatNo: \"110I\", name: \"\", isOwner: true, isTenant: false },\n  { flatNo: \"110J\", name: \"ARJUN\", isOwner: false, isTenant: true },\n  { flatNo: \"110K\", name: \"ATHIRA\", isOwner: false, isTenant: true },\n  { flatNo: \"110L\", name: \"ADWAITH\", isOwner: true, isTenant: false },\n  { flatNo: \"110L\", name: \"ANAND\", isOwner: false, isTenant: false },\n  { flatNo: \"110L\", name: \"NISHA\", isOwner: false, isTenant: false },\n  { flatNo: \"110M\", name: \"DEEPTHI\", isOwner: true, isTenant: false },\n  { flatNo: \"110M\", name: \"ADV SURAJ KRISHNA\", isOwner: false, isTenant: false },\n  { flatNo: \"110M\", name: \"SNIGDHA\", isOwner: false, isTenant: false },\n\n  // Floor 11\n  { flatNo: \"111O\", name: \"CHAKKEEMALAVIKA\", isOwner: false, isTenant: true },\n  { flatNo: \"111P\", name: \"PETER LUGG\", isOwner: true, isTenant: false },\n  { flatNo: \"111P\", name: \"SHEILA LUGG\", isOwner: false, isTenant: false },\n  { flatNo: \"111Q\", name: \"LAKSHMAN\", isOwner: true, isTenant: false },\n  { flatNo: \"111Q\", name: \"HABEEB\", isOwner: false, isTenant: false },\n  { flatNo: \"111R\", name: \"\", isOwner: true, isTenant: false },\n  { flatNo: \"111S\", name: \"TINJU\", isOwner: true, isTenant: false },\n  { flatNo: \"111S\", name: \"LENA\", isOwner: false, isTenant: false },\n  { flatNo: \"111S\", name: \"LIYA\", isOwner: false, isTenant: false },\n  { flatNo: \"111S\", name: \"ANTONY\", isOwner: false, isTenant: false },\n\n  // Floor 12\n  { flatNo: \"112O\", name: \"KURIEN GEORGE\", isOwner: true, isTenant: false },\n  { flatNo: \"112O\", name: \"MATHEW GEORGE\", isOwner: false, isTenant: false },\n  { flatNo: \"112P\", name: \"MANU\", isOwner: false, isTenant: true },\n  { flatNo: \"112P\", name: \"ANU\", isOwner: false, isTenant: true },\n  { flatNo: \"112P\", name: \"PAILY\", isOwner: false, isTenant: true },\n  { flatNo: \"112P\", name: \"PRANAV\", isOwner: false, isTenant: true },\n  { flatNo: \"112Q\", name: \"SALI THASHNATH\", isOwner: true, isTenant: false },\n  { flatNo: \"112Q\", name: \"SHENNU\", isOwner: false, isTenant: false },\n  { flatNo: \"112R\", name: \"SANNU MATHEW\", isOwner: true, isTenant: false },\n  { flatNo: \"112R\", name: \"NISHA\", isOwner: false, isTenant: false },\n  { flatNo: \"112R\", name: \"YANET\", isOwner: false, isTenant: false },\n  { flatNo: \"112S\", name: \"ROHAN BOBBY\", isOwner: false, isTenant: true },\n  { flatNo: \"112S\", name: \"TASHINA\", isOwner: false, isTenant: true },\n  { flatNo: \"112S\", name: \"KEN ROHAN\", isOwner: false, isTenant: true },\n\n  // Floor 13\n  { flatNo: \"113I\", name: \"AFZAL\", isOwner: false, isTenant: true },\n  { flatNo: \"113I\", name: \"ANSEERA\", isOwner: false, isTenant: true },\n  { flatNo: \"113O\", name: \"ARAVIND\", isOwner: false, isTenant: true },\n  { flatNo: \"113P\", name: \"ALEXANDER GEORGE\", isOwner: true, isTenant: false },\n  { flatNo: \"113P\", name: \"JAYA\", isOwner: false, isTenant: false },\n  { flatNo: \"113R\", name: \"\", isOwner: true, isTenant: false },\n  { flatNo: \"113T\", name: \"VEENA\", isOwner: true, isTenant: false },\n  { flatNo: \"113T\", name: \"RAMESH\", isOwner: false, isTenant: false },\n\n  // Floor 14\n  { flatNo: \"114H\", name: \"\", isOwner: true, isTenant: false },\n  { flatNo: \"114I\", name: \"\", isOwner: true, isTenant: false },\n  { flatNo: \"114K\", name: \"AKSHAY\", isOwner: false, isTenant: true },\n  { flatNo: \"114K\", name: \"SHEETHAL\", isOwner: false, isTenant: true },\n  { flatNo: \"114M\", name: \"ADV ASIF NIZAR\", isOwner: true, isTenant: false },\n  { flatNo: \"114M\", name: \"SAFA\", isOwner: false, isTenant: false },\n  { flatNo: \"114O\", name: \"VENUGOPAL\", isOwner: true, isTenant: false },\n  { flatNo: \"114O\", name: \"DEVIKA\", isOwner: false, isTenant: false },\n  { flatNo: \"114U\", name: \"BHARATH CHANDRAN\", isOwner: true, isTenant: false },\n  { flatNo: \"114U\", name: \"NAVEEN\", isOwner: false, isTenant: false },\n\n  // Floor 15\n  { flatNo: \"115N\", name: \"\", isOwner: true, isTenant: false },\n];\n\n// Staff members\nconst staffMembers = [\n  { name: \"SUJITH\", role: \"watchman\" },\n  { name: \"KHIMANADA\", role: \"watchman\" },\n  { name: \"VARGHESE\", role: \"watchman\" },\n  { name: \"RAVINDRA\", role: \"watchman\" },\n  { name: \"AMMINI\", role: \"watchman\" },\n  { name: \"REMANI\", role: \"watchman\" },\n];\n\nexport async function createResidents() {\n  const defaultPassword = \"Skymax123\";\n  const hashedPassword = await hashPassword(defaultPassword);\n\n  console.log(\"Creating resident accounts...\");\n\n  // Create residents\n  for (const resident of buildingResidents) {\n    if (resident.name.trim() === \"\") continue; // Skip empty entries\n\n    const nameParts = resident.name.trim().split(\" \");\n    const firstName = nameParts[0];\n    const lastName = nameParts.slice(1).join(\" \") || \"\";\n    \n    const username = resident.flatNo.toLowerCase();\n    const email = `${username}@ultraskymax.com`;\n\n    try {\n      await db.insert(users).values({\n        username,\n        email,\n        password: hashedPassword,\n        firstName,\n        lastName,\n        unitNumber: resident.flatNo,\n        role: \"resident\",\n        status: \"active\", // Activate all residents by default\n        isOwner: resident.isOwner,\n      });\n\n      console.log(`Created account for ${resident.name} (${username})`);\n    } catch (error) {\n      console.log(`Account for ${resident.name} (${username}) already exists or error occurred`);\n    }\n  }\n\n  // Create staff accounts\n  for (const staff of staffMembers) {\n    const nameParts = staff.name.trim().split(\" \");\n    const firstName = nameParts[0];\n    const lastName = nameParts.slice(1).join(\" \") || \"\";\n    \n    const username = `staff_${firstName.toLowerCase()}`;\n    const email = `${username}@ultraskymax.com`;\n\n    try {\n      await db.insert(users).values({\n        username,\n        email,\n        password: hashedPassword,\n        firstName,\n        lastName,\n        role: staff.role as any,\n        status: \"active\",\n        isOwner: false,\n      });\n\n      console.log(`Created staff account for ${staff.name} (${username})`);\n    } catch (error) {\n      console.log(`Staff account for ${staff.name} (${username}) already exists or error occurred`);\n    }\n  }\n\n  console.log(\"Resident creation completed!\");\n  console.log(\"\\nDefault login credentials:\");\n  console.log(\"Username: [flat number] (e.g., 101a, 102b)\");\n  console.log(\"Password: Skymax123\");\n  console.log(\"\\nStaff usernames: staff_sujith, staff_khimanada, etc.\");\n}\n\n// Run the script\ncreateResidents().then(() => {\n  console.log(\"All residents created successfully!\");\n  process.exit(0);\n}).catch((error) => {\n  console.error(\"Error creating residents:\", error);\n  process.exit(1);\n});","size_bytes":13577},"server/auth.ts":{"content":"import { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { nanoid } from \"nanoid\";\n\nconst scryptAsync = promisify(scrypt);\n\nexport async function hashPassword(password: string): Promise<string> {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nexport async function comparePasswords(supplied: string, stored: string): Promise<boolean> {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function generateResetToken(): string {\n  return nanoid(32);\n}\n\nexport function isPasswordResetTokenExpired(expiresAt: Date): boolean {\n  return new Date() > expiresAt;\n}\n\nexport function getPasswordResetTokenExpiry(): Date {\n  // Token expires in 1 hour\n  return new Date(Date.now() + 60 * 60 * 1000);\n}","size_bytes":1024}},"version":1}